lambda:debug program = +0ms []
lambda:debug program = +3ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  }
]
lambda:debug program = +1ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  }
]
lambda:debug program = +1ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  }
]
lambda:debug program = +1ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  }
]
lambda:debug program = +1ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  }
]
lambda:debug program = +1ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  }
]
lambda:debug program = +1ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 20
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 20
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 20
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  }
]
lambda:debug program = +1ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 20
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "FunctionCall",
        "fn": {
          "type": "Lambda",
          "functionName": "loop",
          "variables": [
            {
              "value": "n"
            }
          ],
          "body": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": ">",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "then": {
              "type": "Binary",
              "operator": "+",
              "right": {
                "args": [
                  {
                    "type": "Binary",
                    "operator": "-",
                    "right": {
                      "type": "Number",
                      "value": 1
                    },
                    "left": {
                      "type": "VariableName",
                      "value": "n"
                    }
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "loop"
                }
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "else": {
              "type": "Number",
              "value": 0
            }
          }
        },
        "args": [
          {
            "type": "Number",
            "value": 100
          }
        ]
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 20
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "FunctionCall",
        "fn": {
          "type": "Lambda",
          "functionName": "loop",
          "variables": [
            {
              "value": "n"
            }
          ],
          "body": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": ">",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "then": {
              "type": "Binary",
              "operator": "+",
              "right": {
                "args": [
                  {
                    "type": "Binary",
                    "operator": "-",
                    "right": {
                      "type": "Number",
                      "value": 1
                    },
                    "left": {
                      "type": "VariableName",
                      "value": "n"
                    }
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "loop"
                }
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "else": {
              "type": "Number",
              "value": 0
            }
          }
        },
        "args": [
          {
            "type": "Number",
            "value": 100
          }
        ]
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Let",
    "variables": [
      {
        "type": "VariableDefinition",
        "name": "x",
        "definition": {
          "type": "Number",
          "value": 2
        }
      },
      {
        "type": "VariableDefinition",
        "name": "y",
        "definition": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "x"
          }
        }
      },
      {
        "type": "VariableDefinition",
        "name": "z",
        "definition": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "VariableName",
            "value": "y"
          },
          "left": {
            "type": "VariableName",
            "value": "x"
          }
        }
      }
    ],
    "body": {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "VariableName",
            "value": "z"
          },
          "left": {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "VariableName",
              "value": "y"
            },
            "left": {
              "type": "VariableName",
              "value": "x"
            }
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 20
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "FunctionCall",
        "fn": {
          "type": "Lambda",
          "functionName": "loop",
          "variables": [
            {
              "value": "n"
            }
          ],
          "body": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": ">",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "then": {
              "type": "Binary",
              "operator": "+",
              "right": {
                "args": [
                  {
                    "type": "Binary",
                    "operator": "-",
                    "right": {
                      "type": "Number",
                      "value": 1
                    },
                    "left": {
                      "type": "VariableName",
                      "value": "n"
                    }
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "loop"
                }
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "else": {
              "type": "Number",
              "value": 0
            }
          }
        },
        "args": [
          {
            "type": "Number",
            "value": 100
          }
        ]
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Let",
    "variables": [
      {
        "type": "VariableDefinition",
        "name": "x",
        "definition": {
          "type": "Number",
          "value": 2
        }
      },
      {
        "type": "VariableDefinition",
        "name": "y",
        "definition": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "x"
          }
        }
      },
      {
        "type": "VariableDefinition",
        "name": "z",
        "definition": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "VariableName",
            "value": "y"
          },
          "left": {
            "type": "VariableName",
            "value": "x"
          }
        }
      }
    ],
    "body": {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "VariableName",
            "value": "z"
          },
          "left": {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "VariableName",
              "value": "y"
            },
            "left": {
              "type": "VariableName",
              "value": "x"
            }
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    }
  },
  {
    "type": "Let",
    "variables": [
      {
        "type": "VariableDefinition",
        "name": "x",
        "definition": {
          "type": "Number",
          "value": 10
        }
      }
    ],
    "body": {
      "type": "Program",
      "program": [
        {
          "type": "Let",
          "variables": [
            {
              "type": "VariableDefinition",
              "name": "x",
              "definition": {
                "type": "Binary",
                "operator": "*",
                "right": {
                  "type": "Number",
                  "value": 2
                },
                "left": {
                  "type": "VariableName",
                  "value": "x"
                }
              }
            },
            {
              "type": "VariableDefinition",
              "name": "y",
              "definition": {
                "type": "Binary",
                "operator": "*",
                "right": {
                  "type": "VariableName",
                  "value": "x"
                },
                "left": {
                  "type": "VariableName",
                  "value": "x"
                }
              }
            }
          ],
          "body": {
            "type": "Program",
            "program": [
              {
                "args": [
                  {
                    "type": "VariableName",
                    "value": "x"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "log"
                }
              },
              {
                "args": [
                  {
                    "type": "VariableName",
                    "value": "y"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "log"
                }
              }
            ]
          }
        },
        {
          "args": [
            {
              "type": "VariableName",
              "value": "x"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      ]
    }
  }
]
lambda:debug program = +1ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 20
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "FunctionCall",
        "fn": {
          "type": "Lambda",
          "functionName": "loop",
          "variables": [
            {
              "value": "n"
            }
          ],
          "body": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": ">",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "then": {
              "type": "Binary",
              "operator": "+",
              "right": {
                "args": [
                  {
                    "type": "Binary",
                    "operator": "-",
                    "right": {
                      "type": "Number",
                      "value": 1
                    },
                    "left": {
                      "type": "VariableName",
                      "value": "n"
                    }
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "loop"
                }
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "else": {
              "type": "Number",
              "value": 0
            }
          }
        },
        "args": [
          {
            "type": "Number",
            "value": 100
          }
        ]
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Let",
    "variables": [
      {
        "type": "VariableDefinition",
        "name": "x",
        "definition": {
          "type": "Number",
          "value": 2
        }
      },
      {
        "type": "VariableDefinition",
        "name": "y",
        "definition": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "x"
          }
        }
      },
      {
        "type": "VariableDefinition",
        "name": "z",
        "definition": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "VariableName",
            "value": "y"
          },
          "left": {
            "type": "VariableName",
            "value": "x"
          }
        }
      }
    ],
    "body": {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "VariableName",
            "value": "z"
          },
          "left": {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "VariableName",
              "value": "y"
            },
            "left": {
              "type": "VariableName",
              "value": "x"
            }
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    }
  },
  {
    "type": "Let",
    "variables": [
      {
        "type": "VariableDefinition",
        "name": "x",
        "definition": {
          "type": "Number",
          "value": 10
        }
      }
    ],
    "body": {
      "type": "Program",
      "program": [
        {
          "type": "Let",
          "variables": [
            {
              "type": "VariableDefinition",
              "name": "x",
              "definition": {
                "type": "Binary",
                "operator": "*",
                "right": {
                  "type": "Number",
                  "value": 2
                },
                "left": {
                  "type": "VariableName",
                  "value": "x"
                }
              }
            },
            {
              "type": "VariableDefinition",
              "name": "y",
              "definition": {
                "type": "Binary",
                "operator": "*",
                "right": {
                  "type": "VariableName",
                  "value": "x"
                },
                "left": {
                  "type": "VariableName",
                  "value": "x"
                }
              }
            }
          ],
          "body": {
            "type": "Program",
            "program": [
              {
                "args": [
                  {
                    "type": "VariableName",
                    "value": "x"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "log"
                }
              },
              {
                "args": [
                  {
                    "type": "VariableName",
                    "value": "y"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "log"
                }
              }
            ]
          }
        },
        {
          "args": [
            {
              "type": "VariableName",
              "value": "x"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      ]
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "n"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        },
        "then": {
          "type": "VariableName",
          "value": "n"
        },
        "else": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "args": [
              {
                "type": "Binary",
                "operator": "-",
                "right": {
                  "type": "Number",
                  "value": 2
                },
                "left": {
                  "type": "VariableName",
                  "value": "n"
                }
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "fib"
            }
          },
          "left": {
            "args": [
              {
                "type": "Binary",
                "operator": "-",
                "right": {
                  "type": "Number",
                  "value": 1
                },
                "left": {
                  "type": "VariableName",
                  "value": "n"
                }
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "fib"
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "fib"
    }
  }
]
lambda:debug program = +0ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 20
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "FunctionCall",
        "fn": {
          "type": "Lambda",
          "functionName": "loop",
          "variables": [
            {
              "value": "n"
            }
          ],
          "body": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": ">",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "then": {
              "type": "Binary",
              "operator": "+",
              "right": {
                "args": [
                  {
                    "type": "Binary",
                    "operator": "-",
                    "right": {
                      "type": "Number",
                      "value": 1
                    },
                    "left": {
                      "type": "VariableName",
                      "value": "n"
                    }
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "loop"
                }
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "else": {
              "type": "Number",
              "value": 0
            }
          }
        },
        "args": [
          {
            "type": "Number",
            "value": 100
          }
        ]
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Let",
    "variables": [
      {
        "type": "VariableDefinition",
        "name": "x",
        "definition": {
          "type": "Number",
          "value": 2
        }
      },
      {
        "type": "VariableDefinition",
        "name": "y",
        "definition": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "x"
          }
        }
      },
      {
        "type": "VariableDefinition",
        "name": "z",
        "definition": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "VariableName",
            "value": "y"
          },
          "left": {
            "type": "VariableName",
            "value": "x"
          }
        }
      }
    ],
    "body": {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "VariableName",
            "value": "z"
          },
          "left": {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "VariableName",
              "value": "y"
            },
            "left": {
              "type": "VariableName",
              "value": "x"
            }
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    }
  },
  {
    "type": "Let",
    "variables": [
      {
        "type": "VariableDefinition",
        "name": "x",
        "definition": {
          "type": "Number",
          "value": 10
        }
      }
    ],
    "body": {
      "type": "Program",
      "program": [
        {
          "type": "Let",
          "variables": [
            {
              "type": "VariableDefinition",
              "name": "x",
              "definition": {
                "type": "Binary",
                "operator": "*",
                "right": {
                  "type": "Number",
                  "value": 2
                },
                "left": {
                  "type": "VariableName",
                  "value": "x"
                }
              }
            },
            {
              "type": "VariableDefinition",
              "name": "y",
              "definition": {
                "type": "Binary",
                "operator": "*",
                "right": {
                  "type": "VariableName",
                  "value": "x"
                },
                "left": {
                  "type": "VariableName",
                  "value": "x"
                }
              }
            }
          ],
          "body": {
            "type": "Program",
            "program": [
              {
                "args": [
                  {
                    "type": "VariableName",
                    "value": "x"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "log"
                }
              },
              {
                "args": [
                  {
                    "type": "VariableName",
                    "value": "y"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "log"
                }
              }
            ]
          }
        },
        {
          "args": [
            {
              "type": "VariableName",
              "value": "x"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      ]
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "n"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        },
        "then": {
          "type": "VariableName",
          "value": "n"
        },
        "else": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "args": [
              {
                "type": "Binary",
                "operator": "-",
                "right": {
                  "type": "Number",
                  "value": 2
                },
                "left": {
                  "type": "VariableName",
                  "value": "n"
                }
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "fib"
            }
          },
          "left": {
            "args": [
              {
                "type": "Binary",
                "operator": "-",
                "right": {
                  "type": "Number",
                  "value": 1
                },
                "left": {
                  "type": "VariableName",
                  "value": "n"
                }
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "fib"
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Lambda",
            "variables": [],
            "body": {
              "args": [
                {
                  "type": "Number",
                  "value": 10
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fib"
              }
            }
          },
          {
            "type": "String",
            "value": "fib(10)"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "time"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  }
]
lambda:debug program = +1ms [
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "head"
        },
        {
          "type": "VariableName",
          "value": "tail"
        }
      ],
      "body": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "i"
          },
          {
            "type": "VariableName",
            "value": "replacement"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "String",
              "value": "get"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "VariableName",
              "value": "head"
            },
            "else": {
              "type": "VariableName",
              "value": "tail"
            }
          },
          "else": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "i"
              }
            },
            "then": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "head"
              }
            },
            "else": {
              "type": "Assign",
              "operator": "=",
              "right": {
                "type": "VariableName",
                "value": "replacement"
              },
              "left": {
                "type": "VariableName",
                "value": "tail"
              }
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "get"
          },
          {
            "type": "Number",
            "value": 1
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "cell"
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "body": {
        "args": [
          {
            "type": "String",
            "value": "set"
          },
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cell"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "null"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "null"
      },
      {
        "type": "VariableName",
        "value": "null"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "list"
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "!=",
          "right": {
            "type": "VariableName",
            "value": "null"
          },
          "left": {
            "type": "VariableName",
            "value": "list"
          }
        },
        "then": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "car"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fn"
              }
            },
            {
              "args": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "list"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cdr"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "fn"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "for-each"
              }
            }
          ]
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<=",
          "right": {
            "type": "VariableName",
            "value": "b"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "args": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "args": [
                {
                  "type": "Binary",
                  "operator": "+",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "a"
                  }
                },
                {
                  "type": "VariableName",
                  "value": "b"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "range"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        },
        "else": {
          "type": "VariableName",
          "value": "null"
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "range"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 10
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 2
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 3
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 4
                    },
                    {
                      "args": [
                        {
                          "type": "Number",
                          "value": 5
                        },
                        {
                          "type": "VariableName",
                          "value": "null"
                        }
                      ],
                      "type": "FunctionCall",
                      "fn": {
                        "type": "VariableName",
                        "value": "cons"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "VariableName",
        "value": "log"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 8
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      },
      {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "body": {
          "args": [
            {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "for-each"
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 2
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-car"
    }
  },
  {
    "args": [
      {
        "type": "VariableName",
        "value": "x"
      },
      {
        "type": "Number",
        "value": 20
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "set-cdr"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "car"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cdr"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "type": "FunctionCall",
        "fn": {
          "type": "Lambda",
          "functionName": "loop",
          "variables": [
            {
              "value": "n"
            }
          ],
          "body": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": ">",
              "right": {
                "type": "Number",
                "value": 0
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "then": {
              "type": "Binary",
              "operator": "+",
              "right": {
                "args": [
                  {
                    "type": "Binary",
                    "operator": "-",
                    "right": {
                      "type": "Number",
                      "value": 1
                    },
                    "left": {
                      "type": "VariableName",
                      "value": "n"
                    }
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "loop"
                }
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            },
            "else": {
              "type": "Number",
              "value": 0
            }
          }
        },
        "args": [
          {
            "type": "Number",
            "value": 100
          }
        ]
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "type": "Let",
    "variables": [
      {
        "type": "VariableDefinition",
        "name": "x",
        "definition": {
          "type": "Number",
          "value": 2
        }
      },
      {
        "type": "VariableDefinition",
        "name": "y",
        "definition": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "x"
          }
        }
      },
      {
        "type": "VariableDefinition",
        "name": "z",
        "definition": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "VariableName",
            "value": "y"
          },
          "left": {
            "type": "VariableName",
            "value": "x"
          }
        }
      }
    ],
    "body": {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "VariableName",
            "value": "z"
          },
          "left": {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "VariableName",
              "value": "y"
            },
            "left": {
              "type": "VariableName",
              "value": "x"
            }
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    }
  },
  {
    "type": "Let",
    "variables": [
      {
        "type": "VariableDefinition",
        "name": "x",
        "definition": {
          "type": "Number",
          "value": 10
        }
      }
    ],
    "body": {
      "type": "Program",
      "program": [
        {
          "type": "Let",
          "variables": [
            {
              "type": "VariableDefinition",
              "name": "x",
              "definition": {
                "type": "Binary",
                "operator": "*",
                "right": {
                  "type": "Number",
                  "value": 2
                },
                "left": {
                  "type": "VariableName",
                  "value": "x"
                }
              }
            },
            {
              "type": "VariableDefinition",
              "name": "y",
              "definition": {
                "type": "Binary",
                "operator": "*",
                "right": {
                  "type": "VariableName",
                  "value": "x"
                },
                "left": {
                  "type": "VariableName",
                  "value": "x"
                }
              }
            }
          ],
          "body": {
            "type": "Program",
            "program": [
              {
                "args": [
                  {
                    "type": "VariableName",
                    "value": "x"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "log"
                }
              },
              {
                "args": [
                  {
                    "type": "VariableName",
                    "value": "y"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "log"
                }
              }
            ]
          }
        },
        {
          "args": [
            {
              "type": "VariableName",
              "value": "x"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "log"
          }
        }
      ]
    }
  },
  {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "n"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "<",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        },
        "then": {
          "type": "VariableName",
          "value": "n"
        },
        "else": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "args": [
              {
                "type": "Binary",
                "operator": "-",
                "right": {
                  "type": "Number",
                  "value": 2
                },
                "left": {
                  "type": "VariableName",
                  "value": "n"
                }
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "fib"
            }
          },
          "left": {
            "args": [
              {
                "type": "Binary",
                "operator": "-",
                "right": {
                  "type": "Number",
                  "value": 1
                },
                "left": {
                  "type": "VariableName",
                  "value": "n"
                }
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "fib"
            }
          }
        }
      }
    },
    "left": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Lambda",
            "variables": [],
            "body": {
              "args": [
                {
                  "type": "Number",
                  "value": 10
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fib"
              }
            }
          },
          {
            "type": "String",
            "value": "fib(10)"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "time"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  },
  {
    "args": [
      {
        "args": [
          {
            "type": "Lambda",
            "variables": [],
            "body": {
              "args": [
                {
                  "type": "Number",
                  "value": 10
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fibJS"
              }
            }
          },
          {
            "type": "String",
            "value": "fibJS(10)"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "time"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  }
]
lambda:debug Function "parse(internal)" took: 13.07195234298706 ms. +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "head"
    },
    {
      "type": "VariableName",
      "value": "tail"
    }
  ],
  "body": {
    "type": "Lambda",
    "variables": [
      {
        "type": "VariableName",
        "value": "a"
      },
      {
        "type": "VariableName",
        "value": "i"
      },
      {
        "type": "VariableName",
        "value": "replacement"
      }
    ],
    "body": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "String",
          "value": "get"
        },
        "left": {
          "type": "VariableName",
          "value": "a"
        }
      },
      "then": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "==",
          "right": {
            "type": "Number",
            "value": 0
          },
          "left": {
            "type": "VariableName",
            "value": "i"
          }
        },
        "then": {
          "type": "VariableName",
          "value": "head"
        },
        "else": {
          "type": "VariableName",
          "value": "tail"
        }
      },
      "else": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "==",
          "right": {
            "type": "Number",
            "value": 0
          },
          "left": {
            "type": "VariableName",
            "value": "i"
          }
        },
        "then": {
          "type": "Assign",
          "operator": "=",
          "right": {
            "type": "VariableName",
            "value": "replacement"
          },
          "left": {
            "type": "VariableName",
            "value": "head"
          }
        },
        "else": {
          "type": "Assign",
          "operator": "=",
          "right": {
            "type": "VariableName",
            "value": "replacement"
          },
          "left": {
            "type": "VariableName",
            "value": "tail"
          }
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.08311796188354492 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "Lambda",
    "variables": [
      {
        "type": "VariableName",
        "value": "head"
      },
      {
        "type": "VariableName",
        "value": "tail"
      }
    ],
    "body": {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "type": "VariableName",
          "value": "i"
        },
        {
          "type": "VariableName",
          "value": "replacement"
        }
      ],
      "body": {
        "type": "If",
        "condition": {
          "type": "Binary",
          "operator": "==",
          "right": {
            "type": "String",
            "value": "get"
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        "then": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "Number",
              "value": 0
            },
            "left": {
              "type": "VariableName",
              "value": "i"
            }
          },
          "then": {
            "type": "VariableName",
            "value": "head"
          },
          "else": {
            "type": "VariableName",
            "value": "tail"
          }
        },
        "else": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "==",
            "right": {
              "type": "Number",
              "value": 0
            },
            "left": {
              "type": "VariableName",
              "value": "i"
            }
          },
          "then": {
            "type": "Assign",
            "operator": "=",
            "right": {
              "type": "VariableName",
              "value": "replacement"
            },
            "left": {
              "type": "VariableName",
              "value": "head"
            }
          },
          "else": {
            "type": "Assign",
            "operator": "=",
            "right": {
              "type": "VariableName",
              "value": "replacement"
            },
            "left": {
              "type": "VariableName",
              "value": "tail"
            }
          }
        }
      }
    }
  },
  "left": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.46527814865112305 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "cell"
    }
  ],
  "body": {
    "args": [
      {
        "type": "String",
        "value": "get"
      },
      {
        "type": "Number",
        "value": 0
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cell"
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.010944366455078125 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "Lambda",
    "variables": [
      {
        "type": "VariableName",
        "value": "cell"
      }
    ],
    "body": {
      "args": [
        {
          "type": "String",
          "value": "get"
        },
        {
          "type": "Number",
          "value": 0
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cell"
      }
    }
  },
  "left": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.3392786979675293 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "cell"
    }
  ],
  "body": {
    "args": [
      {
        "type": "String",
        "value": "get"
      },
      {
        "type": "Number",
        "value": 1
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cell"
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.011783123016357422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "Lambda",
    "variables": [
      {
        "type": "VariableName",
        "value": "cell"
      }
    ],
    "body": {
      "args": [
        {
          "type": "String",
          "value": "get"
        },
        {
          "type": "Number",
          "value": 1
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cell"
      }
    }
  },
  "left": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.14586162567138672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "cell"
    },
    {
      "type": "VariableName",
      "value": "val"
    }
  ],
  "body": {
    "args": [
      {
        "type": "String",
        "value": "set"
      },
      {
        "type": "Number",
        "value": 0
      },
      {
        "type": "VariableName",
        "value": "val"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cell"
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.010078907012939453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "Lambda",
    "variables": [
      {
        "type": "VariableName",
        "value": "cell"
      },
      {
        "type": "VariableName",
        "value": "val"
      }
    ],
    "body": {
      "args": [
        {
          "type": "String",
          "value": "set"
        },
        {
          "type": "Number",
          "value": 0
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cell"
      }
    }
  },
  "left": {
    "type": "VariableName",
    "value": "set-car"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.15848112106323242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "cell"
    },
    {
      "type": "VariableName",
      "value": "val"
    }
  ],
  "body": {
    "args": [
      {
        "type": "String",
        "value": "set"
      },
      {
        "type": "Number",
        "value": 1
      },
      {
        "type": "VariableName",
        "value": "val"
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cell"
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.012816905975341797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "Lambda",
    "variables": [
      {
        "type": "VariableName",
        "value": "cell"
      },
      {
        "type": "VariableName",
        "value": "val"
      }
    ],
    "body": {
      "args": [
        {
          "type": "String",
          "value": "set"
        },
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "VariableName",
          "value": "val"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cell"
      }
    }
  },
  "left": {
    "type": "VariableName",
    "value": "set-cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.7784624099731445 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0637969970703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.002101898193359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0025277137756347656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 0,
    "tail": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.017554283142089844 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Number",
      "value": 0
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.6874151229858398 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "args": [
      {
        "type": "Number",
        "value": 0
      },
      {
        "type": "Number",
        "value": 0
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "null"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.8868956565856934 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "set-car"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.004987239837646484 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.004481792449951172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.004200935363769531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002254962921142578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "set"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0023899078369140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "set"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002113819122314453 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "val"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0049037933349609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0
  },
  "parent": {
    "variables": {
      "head": 0,
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013113021850585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "set"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0
  },
  "parent": {
    "variables": {
      "head": 0,
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0021576881408691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0
  },
  "parent": {
    "variables": {
      "head": 0,
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.40215063095092773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0
  },
  "parent": {
    "variables": {
      "head": 0,
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0019211769104003906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0
  },
  "parent": {
    "variables": {
      "head": 0,
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017256736755371094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0
  },
  "parent": {
    "variables": {
      "head": 0,
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.21030473709106445 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "replacement"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0
  },
  "parent": {
    "variables": {
      "head": 0,
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0035119056701660156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "VariableName",
    "value": "replacement"
  },
  "left": {
    "type": "VariableName",
    "value": "head"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0
  },
  "parent": {
    "variables": {
      "head": 0,
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.10121011734008789 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "VariableName",
      "value": "replacement"
    },
    "left": {
      "type": "VariableName",
      "value": "head"
    }
  },
  "else": {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "VariableName",
      "value": "replacement"
    },
    "left": {
      "type": "VariableName",
      "value": "tail"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0
  },
  "parent": {
    "variables": {
      "head": 0,
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.5194311141967773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0
  },
  "parent": {
    "variables": {
      "head": 0,
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 1.2205390930175781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "set"
    },
    {
      "type": "Number",
      "value": 0
    },
    {
      "type": "VariableName",
      "value": "val"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8711309432983398 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "null"
    },
    {
      "type": "VariableName",
      "value": "null"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "set-car"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 2.3902077674865723 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "set-cdr"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.00790262222290039 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.002997875213623047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0035152435302734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019989013671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "set"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012798309326171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "set"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016660690307617188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "val"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.003943920135498047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1
  },
  "parent": {
    "variables": {
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012059211730957031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "set"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1
  },
  "parent": {
    "variables": {
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014271736145019531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1
  },
  "parent": {
    "variables": {
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18439388275146484 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1
  },
  "parent": {
    "variables": {
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013551712036132812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1
  },
  "parent": {
    "variables": {
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016880035400390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1
  },
  "parent": {
    "variables": {
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20421218872070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "replacement"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1
  },
  "parent": {
    "variables": {
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.003403186798095703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "VariableName",
    "value": "replacement"
  },
  "left": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1
  },
  "parent": {
    "variables": {
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.10888195037841797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "VariableName",
      "value": "replacement"
    },
    "left": {
      "type": "VariableName",
      "value": "head"
    }
  },
  "else": {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "VariableName",
      "value": "replacement"
    },
    "left": {
      "type": "VariableName",
      "value": "tail"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1
  },
  "parent": {
    "variables": {
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.501032829284668 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1
  },
  "parent": {
    "variables": {
      "tail": 0
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8745183944702148 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "set"
    },
    {
      "type": "Number",
      "value": 1
    },
    {
      "type": "VariableName",
      "value": "val"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.3974499702453613 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "null"
    },
    {
      "type": "VariableName",
      "value": "null"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "set-cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.8164267539978027 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "list"
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "!=",
      "right": {
        "type": "VariableName",
        "value": "null"
      },
      "left": {
        "type": "VariableName",
        "value": "list"
      }
    },
    "then": {
      "type": "Program",
      "program": [
        {
          "args": [
            {
              "args": [
                {
                  "type": "VariableName",
                  "value": "list"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "car"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "fn"
          }
        },
        {
          "args": [
            {
              "args": [
                {
                  "type": "VariableName",
                  "value": "list"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cdr"
              }
            },
            {
              "type": "VariableName",
              "value": "fn"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "for-each"
          }
        }
      ]
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.012967109680175781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "Lambda",
    "variables": [
      {
        "type": "VariableName",
        "value": "list"
      },
      {
        "type": "VariableName",
        "value": "fn"
      }
    ],
    "body": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "!=",
        "right": {
          "type": "VariableName",
          "value": "null"
        },
        "left": {
          "type": "VariableName",
          "value": "list"
        }
      },
      "then": {
        "type": "Program",
        "program": [
          {
            "args": [
              {
                "args": [
                  {
                    "type": "VariableName",
                    "value": "list"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "car"
                }
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "fn"
            }
          },
          {
            "args": [
              {
                "args": [
                  {
                    "type": "VariableName",
                    "value": "list"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "cdr"
                }
              },
              {
                "type": "VariableName",
                "value": "fn"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "for-each"
            }
          }
        ]
      }
    }
  },
  "left": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.13631725311279297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "b"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "<=",
      "right": {
        "type": "VariableName",
        "value": "b"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "args": [
        {
          "type": "VariableName",
          "value": "a"
        },
        {
          "args": [
            {
              "type": "Binary",
              "operator": "+",
              "right": {
                "type": "Number",
                "value": 1
              },
              "left": {
                "type": "VariableName",
                "value": "a"
              }
            },
            {
              "type": "VariableName",
              "value": "b"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "range"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    "else": {
      "type": "VariableName",
      "value": "null"
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.012887001037597656 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "Lambda",
    "variables": [
      {
        "type": "VariableName",
        "value": "a"
      },
      {
        "type": "VariableName",
        "value": "b"
      }
    ],
    "body": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "<=",
        "right": {
          "type": "VariableName",
          "value": "b"
        },
        "left": {
          "type": "VariableName",
          "value": "a"
        }
      },
      "then": {
        "args": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "args": [
              {
                "type": "Binary",
                "operator": "+",
                "right": {
                  "type": "Number",
                  "value": 1
                },
                "left": {
                  "type": "VariableName",
                  "value": "a"
                }
              },
              {
                "type": "VariableName",
                "value": "b"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "range"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cons"
        }
      },
      "else": {
        "type": "VariableName",
        "value": "null"
      }
    }
  },
  "left": {
    "type": "VariableName",
    "value": "range"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.15937566757202148 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0036568641662597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 10
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.00186920166015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 20
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0019960403442382812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 10,
    "tail": 20
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.013349056243896484 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Number",
      "value": 10
    },
    {
      "type": "Number",
      "value": 20
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.45506811141967773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "args": [
      {
        "type": "Number",
        "value": 10
      },
      {
        "type": "Number",
        "value": 20
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.6241817474365234 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0069561004638671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.00475311279296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0072345733642578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.004255771636962891 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014328956604003906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017080307006835938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015168190002441406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015087127685546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.2055501937866211 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015330314636230469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017728805541992188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19496870040893555 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.010581016540527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.39909982681274414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8216981887817383 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.273228645324707 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "x"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.6132535934448242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
10
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "x"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 2.3490071296691895 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.004991054534912109 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0031561851501464844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0024280548095703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020837783813476562 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017948150634765625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014920234680175781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013141632080078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00160980224609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.2283000946044922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014452934265136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001667022705078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.22430706024169922 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00699615478515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.48531389236450195 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 1.0010900497436523 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5335946083068848 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "x"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 2.399393081665039 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
20
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "x"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 2.762463092803955 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.004185199737548828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0019512176513671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.003051280975341797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.001659393310546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.003367900848388672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 3
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0015940666198730469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.003161907196044922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 4
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0015897750854492188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.003368854522705078 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 5
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0015649795532226562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.004299163818359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.03484392166137695 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Number",
      "value": 5
    },
    {
      "type": "VariableName",
      "value": "null"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.7069439888000488 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.017830848693847656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Number",
      "value": 4
    },
    {
      "args": [
        {
          "type": "Number",
          "value": 5
        },
        {
          "type": "VariableName",
          "value": "null"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.302107810974121 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.017817974090576172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Number",
      "value": 3
    },
    {
      "args": [
        {
          "type": "Number",
          "value": 4
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 5
            },
            {
              "type": "VariableName",
              "value": "null"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.8804850578308105 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.016128063201904297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Number",
      "value": 2
    },
    {
      "args": [
        {
          "type": "Number",
          "value": 3
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 4
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 5
                },
                {
                  "type": "VariableName",
                  "value": "null"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 2.489046096801758 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.03930521011352539 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Number",
      "value": 1
    },
    {
      "args": [
        {
          "type": "Number",
          "value": 2
        },
        {
          "args": [
            {
              "type": "Number",
              "value": 3
            },
            {
              "args": [
                {
                  "type": "Number",
                  "value": 4
                },
                {
                  "args": [
                    {
                      "type": "Number",
                      "value": 5
                    },
                    {
                      "type": "VariableName",
                      "value": "null"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "cons"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "cons"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cons"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cons"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 3.2286763191223145 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "args": [
      {
        "type": "Number",
        "value": 1
      },
      {
        "args": [
          {
            "type": "Number",
            "value": 2
          },
          {
            "args": [
              {
                "type": "Number",
                "value": 3
              },
              {
                "args": [
                  {
                    "type": "Number",
                    "value": 4
                  },
                  {
                    "args": [
                      {
                        "type": "Number",
                        "value": 5
                      },
                      {
                        "type": "VariableName",
                        "value": "null"
                      }
                    ],
                    "type": "FunctionCall",
                    "fn": {
                      "type": "VariableName",
                      "value": "cons"
                    }
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "cons"
                }
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cons"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cons"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 3.6617393493652344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.005631923675537109 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.003159046173095703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0041656494140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020036697387695312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.009278297424316406 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18915891647338867 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.007428646087646484 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.004827976226806641 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0034737586975097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011548995971679688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015530586242675781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015649795532226562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013260841369628906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015430450439453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19892168045043945 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013241767883300781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017247200012207031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.2127361297607422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.010470867156982422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.43834590911865234 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8788537979125977 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.3241910934448242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.6307587623596191 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
1
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.900780200958252 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0062351226806640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.004718780517578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.003795623779296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001041412353515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015840530395507812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015802383422851562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011339187622070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016160011291503906 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1877756118774414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011219978332519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016088485717773438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18859529495239258 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.010250568389892578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.41014814376831055 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8200697898864746 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2676310539245605 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.576200008392334 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0039310455322265625 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011620521545410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0024971961975097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18780803680419922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010690689086914062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019488334655761719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022373199462890625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017447471618652344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001682281494140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001544952392578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013308525085449219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012269020080566406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1943359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010323524475097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013742446899414062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19653081893920898 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.01390695571899414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.40374183654785156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.7995119094848633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.256080150604248 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5634112358093262 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
2
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.796402931213379 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015149116516113281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009617805480957031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001827239990234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010008811950683594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014629364013671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014982223510742188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010790824890136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014863014221191406 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19101524353027344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009899139404296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014171600341796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18232488632202148 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.005309104919433594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.4045262336730957 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8249821662902832 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2283496856689453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.503312110900879 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0030689239501953125 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009908676147460938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0026121139526367188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18448638916015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001961231231689453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013756752014160156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002399921417236328 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011372566223144531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015940666198730469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015649795532226562 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00113677978515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015082359313964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1903071403503418 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011615753173828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015778541564941406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19494009017944336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.010182857513427734 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.41074037551879883 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8165426254272461 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2607002258300781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5939621925354004 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
3
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8600726127624512 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002197265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016031265258789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00238800048828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010728836059570312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015158653259277344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015463829040527344 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015158653259277344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015439987182617188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19162893295288086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010790824890136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001918792724609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1939249038696289 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.006609916687011719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.41620874404907227 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8226008415222168 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2417831420898438 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.768932819366455 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0030221939086914062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010962486267089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002457141876220703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1941828727722168 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010142326354980469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015597343444824219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021467208862304688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012292861938476562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016083717346191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015988349914550781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010647773742675781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016570091247558594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.30761194229125977 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012478828430175781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015406608581542969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19063282012939453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.011338233947753906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.3984818458557129 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.9195489883422852 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.3556909561157227 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.6520895957946777 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
4
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.9066534042358398 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018839836120605469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015478134155273438 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0023522377014160156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015501976013183594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015339851379394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014700889587402344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001071929931640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016083717346191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19458389282226562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010933876037597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014710426330566406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18442916870117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.005628108978271484 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.3966407775878906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.7946047782897949 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2186250686645508 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.53574800491333 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0024056434631347656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001049041748046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021572113037109375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1811537742614746 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009260177612304688 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015692710876464844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002033233642578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010972023010253906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015578269958496094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014820098876953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012178421020507812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00152587890625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1930999755859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011181831359863281 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015368461608886719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18611907958984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.009030818939208984 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.3977851867675781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8066673278808594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2369718551635742 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.531907081604004 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
5
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.7749500274658203 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015511512756347656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015778541564941406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002521038055419922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014986991882324219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015878677368164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015721321105957031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001068115234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014801025390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19516611099243164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011377334594726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015521049499511719 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19701671600341797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.013422012329101562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.4060378074645996 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8091440200805664 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.228477954864502 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5183300971984863 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0023097991943359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011258125305175781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021300315856933594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1817760467529297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.27663421630859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.237316131591797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.219955921173096 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.609006881713867 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.562633991241455 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 8.68441915512085 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 9.089025974273682 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.312440872192383 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 13.401463031768799 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 13.809500217437744 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 15.721367359161377 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 17.715099811553955 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 18.114745140075684 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 20.12730360031128 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 22.240402221679688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 22.645075798034668 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "x"
    },
    {
      "type": "VariableName",
      "value": "log"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 23.15810203552246 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0037031173706054688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "range"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0029993057250976562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0014481544494628906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 8
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0014791488647460938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010790824890136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002170085906982422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<=",
  "right": {
    "type": "VariableName",
    "value": "b"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.26448965072631836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.005692005157470703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0024619102478027344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "range"
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.004750728607177734 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014748573303222656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014667510986328125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18775272369384766 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022149085998535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009889602661132812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020151138305664062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<=",
  "right": {
    "type": "VariableName",
    "value": "b"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.19480323791503906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016493797302246094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0025200843811035156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "range"
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002223968505859375 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001590728759765625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001605987548828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.21465682983398438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0024251937866210938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010509490966796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020918846130371094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<=",
  "right": {
    "type": "VariableName",
    "value": "b"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.21919488906860352 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001422882080078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022149085998535156 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "range"
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00179290771484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001544952392578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019183158874511719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2209181785583496 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0027570724487304688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011010169982910156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021996498107910156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<=",
  "right": {
    "type": "VariableName",
    "value": "b"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2078852653503418 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00139617919921875 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021691322326660156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "range"
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016999244689941406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014138221740722656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014982223510742188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.19115972518920898 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002171039581298828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010800361633300781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021371841430664062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<=",
  "right": {
    "type": "VariableName",
    "value": "b"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.207550048828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016179084777832031 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021848678588867188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "range"
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016069412231445312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016312599182128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015339851379394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18572139739990234 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002201080322265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010380744934082031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00201416015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<=",
  "right": {
    "type": "VariableName",
    "value": "b"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1930398941040039 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015468597412109375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0023169517517089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "range"
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015888214111328125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001495361328125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014543533325195312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18776702880859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00206756591796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011467933654785156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021691322326660156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<=",
  "right": {
    "type": "VariableName",
    "value": "b"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.20456218719482422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012378692626953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002425670623779297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "range"
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014109611511230469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014510154724121094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00150299072265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.19426679611206055 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00896596908569336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010380744934082031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021376609802246094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<=",
  "right": {
    "type": "VariableName",
    "value": "b"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.19087505340576172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015416145324707031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021386146545410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "range"
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015001296997070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016498565673828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00162506103515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18835020065307617 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 9
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002330303192138672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": 9,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010361671447753906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 9
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "b"
}, environment: Enviroment = {
  "variables": {
    "a": 9,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002044677734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<=",
  "right": {
    "type": "VariableName",
    "value": "b"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 9,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.20201778411865234 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {
    "a": 9,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.011194705963134766 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<=",
    "right": {
      "type": "VariableName",
      "value": "b"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "args": [
      {
        "type": "VariableName",
        "value": "a"
      },
      {
        "args": [
          {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          {
            "type": "VariableName",
            "value": "b"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "else": {
    "type": "VariableName",
    "value": "null"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 9,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.4045290946960449 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "+",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    {
      "type": "VariableName",
      "value": "b"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "range"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.0059380531311035 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.01759481430053711 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "range"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.4489622116088867 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<=",
    "right": {
      "type": "VariableName",
      "value": "b"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "args": [
      {
        "type": "VariableName",
        "value": "a"
      },
      {
        "args": [
          {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          {
            "type": "VariableName",
            "value": "b"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "else": {
    "type": "VariableName",
    "value": "null"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 8,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8502187728881836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "+",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    {
      "type": "VariableName",
      "value": "b"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "range"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.4649667739868164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.012104034423828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "range"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.9072518348693848 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<=",
    "right": {
      "type": "VariableName",
      "value": "b"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "args": [
      {
        "type": "VariableName",
        "value": "a"
      },
      {
        "args": [
          {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          {
            "type": "VariableName",
            "value": "b"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "else": {
    "type": "VariableName",
    "value": "null"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 7,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.3167061805725098 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "+",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    {
      "type": "VariableName",
      "value": "b"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "range"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.9359211921691895 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.017527103424072266 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "range"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.370529651641846 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<=",
    "right": {
      "type": "VariableName",
      "value": "b"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "args": [
      {
        "type": "VariableName",
        "value": "a"
      },
      {
        "args": [
          {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          {
            "type": "VariableName",
            "value": "b"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "else": {
    "type": "VariableName",
    "value": "null"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 6,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.779397010803223 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "+",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    {
      "type": "VariableName",
      "value": "b"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "range"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 5.396184921264648 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.01183176040649414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "range"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 5.834048748016357 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<=",
    "right": {
      "type": "VariableName",
      "value": "b"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "args": [
      {
        "type": "VariableName",
        "value": "a"
      },
      {
        "args": [
          {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          {
            "type": "VariableName",
            "value": "b"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "else": {
    "type": "VariableName",
    "value": "null"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 5,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.307299613952637 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "+",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    {
      "type": "VariableName",
      "value": "b"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "range"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.908356189727783 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.016942977905273438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "range"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.341631889343262 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<=",
    "right": {
      "type": "VariableName",
      "value": "b"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "args": [
      {
        "type": "VariableName",
        "value": "a"
      },
      {
        "args": [
          {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          {
            "type": "VariableName",
            "value": "b"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "else": {
    "type": "VariableName",
    "value": "null"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 4,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.763869285583496 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "+",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    {
      "type": "VariableName",
      "value": "b"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "range"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 8.422932147979736 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.011693000793457031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "range"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 8.865948677062988 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<=",
    "right": {
      "type": "VariableName",
      "value": "b"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "args": [
      {
        "type": "VariableName",
        "value": "a"
      },
      {
        "args": [
          {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          {
            "type": "VariableName",
            "value": "b"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "else": {
    "type": "VariableName",
    "value": "null"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 3,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 9.303185939788818 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "+",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    {
      "type": "VariableName",
      "value": "b"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "range"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 10.179440975189209 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.011492252349853516 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "range"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 10.605885982513428 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<=",
    "right": {
      "type": "VariableName",
      "value": "b"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "args": [
      {
        "type": "VariableName",
        "value": "a"
      },
      {
        "args": [
          {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          {
            "type": "VariableName",
            "value": "b"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "else": {
    "type": "VariableName",
    "value": "null"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 2,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.003499984741211 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "+",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    {
      "type": "VariableName",
      "value": "b"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "range"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.605936050415039 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.011840343475341797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "args": [
        {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "a"
          }
        },
        {
          "type": "VariableName",
          "value": "b"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "range"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.049688339233398 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<=",
    "right": {
      "type": "VariableName",
      "value": "b"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "args": [
      {
        "type": "VariableName",
        "value": "a"
      },
      {
        "args": [
          {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          {
            "type": "VariableName",
            "value": "b"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "range"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "else": {
    "type": "VariableName",
    "value": "null"
  }
}, environment: Enviroment = {
  "variables": {
    "a": 1,
    "b": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.54558801651001 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Number",
      "value": 1
    },
    {
      "type": "Number",
      "value": 8
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "range"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 12.949571132659912 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "x"
    }
  ],
  "body": {
    "args": [
      {
        "type": "Binary",
        "operator": "*",
        "right": {
          "type": "VariableName",
          "value": "x"
        },
        "left": {
          "type": "VariableName",
          "value": "x"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.009938240051269531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001468658447265625 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0025768280029296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18728065490722656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009746551513671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016689300537109375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0023980140686035156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016512870788574219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015001296997070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015339851379394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014967918395996094 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.002068042755126953 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.49146270751953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001811981201171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013580322265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19989967346191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.011346817016601562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.3977341651916504 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 1.097522258758545 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5642499923706055 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.878091812133789 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "x": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.005698204040527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016207695007324219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021190643310546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "*",
  "right": {
    "type": "VariableName",
    "value": "x"
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2011089324951172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
1
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "*",
      "right": {
        "type": "VariableName",
        "value": "x"
      },
      "left": {
        "type": "VariableName",
        "value": "x"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.4534282684326172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.649196147918701 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017323493957519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015521049499511719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002201080322265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012998580932617188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014758110046386719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00148773193359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010938644409179688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015087127685546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1958599090576172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011262893676757812 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00148773193359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19520807266235352 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.005619049072265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.40079832077026367 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8069076538085938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2294716835021973 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5258750915527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002440929412841797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011410713195800781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0023131370544433594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18018579483032227 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010890960693359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002067089080810547 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021920204162597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015139579772949219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015931129455566406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00151824951171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011868476867675781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015349388122558594 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19416475296020508 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010290145874023438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015821456909179688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19720172882080078 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.008861064910888672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.40097808837890625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8052258491516113 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2368059158325195 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5471444129943848 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "x": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013408660888671875 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015616416931152344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002196788787841797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "*",
  "right": {
    "type": "VariableName",
    "value": "x"
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1863088607788086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
4
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "*",
      "right": {
        "type": "VariableName",
        "value": "x"
      },
      "left": {
        "type": "VariableName",
        "value": "x"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.4416041374206543 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.289400577545166 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013051033020019531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015978813171386719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0023069381713867188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015192031860351562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015192031860351562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001499176025390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011692047119140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014891624450683594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19187688827514648 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011029243469238281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017056465148925781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20343780517578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0072841644287109375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.41472530364990234 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8071961402893066 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2107157707214355 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5188789367675781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0026268959045410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010843276977539062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002101898193359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1850428581237793 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010128021240234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015120506286621094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020761489868164062 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013256072998046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015439987182617188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014910697937011719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011091232299804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015878677368164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19417810440063477 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011086463928222656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014910697937011719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1854877471923828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.008975982666015625 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.3987088203430176 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8069400787353516 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2344861030578613 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5237526893615723 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "x": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012350082397460938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019249916076660156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002604961395263672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "*",
  "right": {
    "type": "VariableName",
    "value": "x"
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.20926570892333984 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 9
}.
 +0ms
9
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "*",
      "right": {
        "type": "VariableName",
        "value": "x"
      },
      "left": {
        "type": "VariableName",
        "value": "x"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.5200338363647461 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.338470935821533 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014886856079101562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015554428100585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022873878479003906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012240409851074219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015797615051269531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014410018920898438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010919570922851562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015473365783691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18824100494384766 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001003265380859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014390945434570312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18666601181030273 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.006415843963623047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.4064469337463379 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 3
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8070063591003418 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2362160682678223 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5265851020812988 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0037689208984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010857582092285156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022935867309570312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18800830841064453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010089874267578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015740394592285156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002162933349609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010628700256347656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014233589172363281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001399993896484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011501312255859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013914108276367188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20650625228881836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010199546813964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014252662658691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19569778442382812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.010539054870605469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.40477705001831055 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8148350715637207 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2657513618469238 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5555710792541504 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "x": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00127410888671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016536712646484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021529197692871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "*",
  "right": {
    "type": "VariableName",
    "value": "x"
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.19496774673461914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 16
}.
 +0ms
16
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "*",
      "right": {
        "type": "VariableName",
        "value": "x"
      },
      "left": {
        "type": "VariableName",
        "value": "x"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.45795297622680664 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.3148488998413086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001461029052734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014920234680175781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002190113067626953 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010037422180175781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001605987548828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015439987182617188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001155853271484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015964508056640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20121192932128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010366439819335938 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014400482177734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18615388870239258 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0057220458984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.39266204833984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 4
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8220829963684082 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2405390739440918 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5350561141967773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002441883087158203 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00096893310546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022268295288085938 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1807861328125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010218620300292969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018086433410644531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020537376403808594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013499259948730469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015330314636230469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014810562133789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011110305786132812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015530586242675781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20070362091064453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010480880737304688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015516281127929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19436216354370117 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.009335041046142578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.3983588218688965 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8111639022827148 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.261591911315918 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5515222549438477 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "x": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012969970703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017752647399902344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020170211791992188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "*",
  "right": {
    "type": "VariableName",
    "value": "x"
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18837690353393555 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 25
}.
 +0ms
25
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "*",
      "right": {
        "type": "VariableName",
        "value": "x"
      },
      "left": {
        "type": "VariableName",
        "value": "x"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.43693113327026367 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.282160758972168 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015978813171386719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016388893127441406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022597312927246094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011167526245117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015249252319335938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015401840209960938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010590553283691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015978813171386719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1874408721923828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013070106506347656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017199516296386719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1894230842590332 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.008134841918945312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.4068889617919922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 5
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8139138221740723 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2313261032104492 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.520176887512207 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0023431777954101562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010609626770019531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002285003662109375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1816239356994629 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010247230529785156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00156402587890625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002228260040283203 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013298988342285156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014238357543945312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015497207641601562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015382766723632812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015106201171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19598102569580078 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014157295227050781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012960433959960938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.2068014144897461 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00943613052368164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.41110897064208984 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8135619163513184 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2617030143737793 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5646100044250488 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "x": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002032756805419922 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002346038818359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0024900436401367188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "*",
  "right": {
    "type": "VariableName",
    "value": "x"
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.24499797821044922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 36
}.
 +0ms
36
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "*",
      "right": {
        "type": "VariableName",
        "value": "x"
      },
      "left": {
        "type": "VariableName",
        "value": "x"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.6009950637817383 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.4932117462158203 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002429962158203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002602100372314453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010819435119628906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018057823181152344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014801025390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010547637939453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0024633407592773438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.4574108123779297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013298988342285156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016341209411621094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.23493623733520508 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.009521961212158203 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.48166513442993164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 6
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 1.1717572212219238 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5926251411437988 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.9466867446899414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0027899742126464844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021753311157226562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0027561187744140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2130451202392578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010600090026855469 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013942718505859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021538734436035156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001087188720703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017118453979492188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018439292907714844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010600090026855469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016226768493652344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18627071380615234 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009598731994628906 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015959739685058594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18459463119506836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.009368896484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.3987998962402344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.7860660552978516 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.225417137145996 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5033831596374512 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "x": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001434326171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010709762573242188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021390914916992188 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "*",
  "right": {
    "type": "VariableName",
    "value": "x"
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18773984909057617 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 49
}.
 +0ms
49
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "*",
      "right": {
        "type": "VariableName",
        "value": "x"
      },
      "left": {
        "type": "VariableName",
        "value": "x"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.46361303329467773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.273921012878418 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012850761413574219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.005863189697265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002171039581298828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014581680297851562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016131401062011719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015478134155273438 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011959075927734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0019888877868652344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1912999153137207 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013289451599121094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014958381652832031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18605995178222656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.08218908309936523 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.5003089904785156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 7
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8893227577209473 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.3282008171081543 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.631059169769287 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019059181213378906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010023117065429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022640228271484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16601276397705078 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009417533874511719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011243820190429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00191497802734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009751319885253906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014963150024414062 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013751983642578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009641647338867188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010781288146972656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1812129020690918 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009708404541015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011043548583984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17181682586669922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.006766319274902344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.35678863525390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.7199068069458008 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.1042299270629883 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.35862398147583 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "x": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011138916015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000926971435546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019130706787109375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "*",
  "right": {
    "type": "VariableName",
    "value": "x"
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16240787506103516 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 64
}.
 +0ms
64
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "*",
      "right": {
        "type": "VariableName",
        "value": "x"
      },
      "left": {
        "type": "VariableName",
        "value": "x"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3835158348083496 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fn"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.009840965270996 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "for-each"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011210441589355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010457038879394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019702911376953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009756088256835938 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014295578002929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013570785522460938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009698867797851562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014820098876953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1771988868713379 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009069442749023438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001384735107421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17392206192016602 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.004161834716796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.3533668518066406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 8
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.7159848213195801 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.0746207237243652 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "list"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.326240062713623 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fn"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002151012420654297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "list"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000885009765625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "null"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022215843200683594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "!=",
  "right": {
    "type": "VariableName",
    "value": "null"
  },
  "left": {
    "type": "VariableName",
    "value": "list"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16225194931030273 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2546710968017578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.943324089050293 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.146111011505127 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.492260932922363 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.514182090759277 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 8.985771656036377 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 9.401762008666992 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.807147979736328 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 15.503044128417969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 15.893144130706787 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 17.837907791137695 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 20.329891204833984 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 20.71439838409424 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 22.656808853149414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 25.166616439819336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 25.555039882659912 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 27.73704767227173 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 30.275386333465576 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 30.858723163604736 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 32.79569101333618 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 35.28079175949097 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 35.67764711380005 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "list"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "VariableName",
      "value": "fn"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 37.61279106140137 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fn"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "list"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        },
        {
          "type": "VariableName",
          "value": "fn"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 40.466529846191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "!=",
    "right": {
      "type": "VariableName",
      "value": "null"
    },
    "left": {
      "type": "VariableName",
      "value": "list"
    }
  },
  "then": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "car"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fn"
        }
      },
      {
        "args": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "list"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cdr"
            }
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "for-each"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 40.869908809661865 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "Number",
          "value": 1
        },
        {
          "type": "Number",
          "value": 8
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "range"
      }
    },
    {
      "type": "Lambda",
      "variables": [
        {
          "type": "VariableName",
          "value": "x"
        }
      ],
      "body": {
        "args": [
          {
            "type": "Binary",
            "operator": "*",
            "right": {
              "type": "VariableName",
              "value": "x"
            },
            "left": {
              "type": "VariableName",
              "value": "x"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "log"
        }
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "for-each"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 54.228074073791504 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cons"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0036630630493164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0014209747314453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0015115737915039062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "a"
    },
    {
      "type": "VariableName",
      "value": "i"
    },
    {
      "type": "VariableName",
      "value": "replacement"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "String",
        "value": "get"
      },
      "left": {
        "type": "VariableName",
        "value": "a"
      }
    },
    "then": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "head"
      },
      "else": {
        "type": "VariableName",
        "value": "tail"
      }
    },
    "else": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "==",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "i"
        }
      },
      "then": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "head"
        }
      },
      "else": {
        "type": "Assign",
        "operator": "=",
        "right": {
          "type": "VariableName",
          "value": "replacement"
        },
        "left": {
          "type": "VariableName",
          "value": "tail"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "head": 1,
    "tail": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.012013435363769531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Number",
      "value": 1
    },
    {
      "type": "Number",
      "value": 2
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cons"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.38375377655029297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "args": [
      {
        "type": "Number",
        "value": 1
      },
      {
        "type": "Number",
        "value": 2
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "cons"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.47316789627075195 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0024399757385253906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.002090930938720703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.001986980438232422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009732246398925781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013523101806640625 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014238357543945312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0025620460510253906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010867118835449219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17954301834106445 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010290145874023438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010600090026855469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17515182495117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.009044170379638672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.38347768783569336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.7400922775268555 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.1084189414978027 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "x"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.3748130798339844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
1
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "x"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.587717056274414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0020990371704101562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0018291473388671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0017781257629394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009603500366210938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011048316955566406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015048980712890625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011167526245117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014185905456542969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17839384078979492 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013132095336914062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013628005981445312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16897916793823242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.004434108734130859 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.340670108795166 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.7044234275817871 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.0815691947937012 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "x"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.3393940925598145 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
2
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "x"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.5417637825012207 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "set-car"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0024480819702148438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.002017974853515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 10
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0014472007751464844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {
    "val": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011239051818847656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "set"
}, environment: Enviroment = {
  "variables": {
    "val": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001171112060546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "set"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "val": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018682479858398438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "val"
}, environment: Enviroment = {
  "variables": {
    "val": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002925872802734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0,
    "replacement": 10
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001026153564453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "set"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0,
    "replacement": 10
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015459060668945312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0,
    "replacement": 10
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19016504287719727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0,
    "replacement": 10
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011072158813476562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0,
    "replacement": 10
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014972686767578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0,
    "replacement": 10
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1770162582397461 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "replacement"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0,
    "replacement": 10
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015158653259277344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "VariableName",
    "value": "replacement"
  },
  "left": {
    "type": "VariableName",
    "value": "head"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0,
    "replacement": 10
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.09619903564453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "VariableName",
      "value": "replacement"
    },
    "left": {
      "type": "VariableName",
      "value": "head"
    }
  },
  "else": {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "VariableName",
      "value": "replacement"
    },
    "left": {
      "type": "VariableName",
      "value": "tail"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0,
    "replacement": 10
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.4748497009277344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 0,
    "replacement": 10
  },
  "parent": {
    "variables": {
      "head": 1,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8768839836120605 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "set"
    },
    {
      "type": "Number",
      "value": 0
    },
    {
      "type": "VariableName",
      "value": "val"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {
    "val": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.4216957092285156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "x"
    },
    {
      "type": "Number",
      "value": 10
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "set-car"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.7829713821411133 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "set-cdr"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.003838062286376953 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.002147197723388672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 20
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0015158653259277344 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {
    "val": 20
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010809898376464844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "set"
}, environment: Enviroment = {
  "variables": {
    "val": 20
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001811981201171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "set"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "val": 20
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001644134521484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "val"
}, environment: Enviroment = {
  "variables": {
    "val": 20
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002288341522216797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1,
    "replacement": 20
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012493133544921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "set"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1,
    "replacement": 20
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015039443969726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1,
    "replacement": 20
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.2052001953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1,
    "replacement": 20
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009999275207519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1,
    "replacement": 20
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015311241149902344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1,
    "replacement": 20
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1771526336669922 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "replacement"
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1,
    "replacement": 20
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017747879028320312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "VariableName",
    "value": "replacement"
  },
  "left": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1,
    "replacement": 20
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.10339593887329102 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "VariableName",
      "value": "replacement"
    },
    "left": {
      "type": "VariableName",
      "value": "head"
    }
  },
  "else": {
    "type": "Assign",
    "operator": "=",
    "right": {
      "type": "VariableName",
      "value": "replacement"
    },
    "left": {
      "type": "VariableName",
      "value": "tail"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1,
    "replacement": 20
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.4920496940612793 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "set",
    "i": 1,
    "replacement": 20
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8896970748901367 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "set"
    },
    {
      "type": "Number",
      "value": 1
    },
    {
      "type": "VariableName",
      "value": "val"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {
    "val": 20
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.3633670806884766 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "x"
    },
    {
      "type": "Number",
      "value": 20
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "set-cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.7231550216674805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.002956390380859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "car"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0019259452819824219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0019559860229492188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009822845458984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014691352844238281 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001392364501953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010271072387695312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014338493347167969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18639516830444336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009303092956542969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014128684997558594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17490816116333008 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "head"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.007457256317138672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.3585233688354492 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 0,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.7202577590942383 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 0
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.0894560813903809 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "x"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "car"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.3440937995910645 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
10
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "x"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "car"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.5587177276611328 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.00220489501953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cdr"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0017876625061035156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0026531219482421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "cell"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013971328735351562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019979476928710938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018091201782226562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "a"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010380744934082031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "get"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016050338745117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "get"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "String",
    "value": "get"
  },
  "left": {
    "type": "VariableName",
    "value": "a"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1867527961730957 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "i"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009827613830566406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015473365783691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "==",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "i"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1733698844909668 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "tail"
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.006398200988769531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "i"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "head"
  },
  "else": {
    "type": "VariableName",
    "value": "tail"
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.3660740852355957 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "==",
    "right": {
      "type": "String",
      "value": "get"
    },
    "left": {
      "type": "VariableName",
      "value": "a"
    }
  },
  "then": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "head"
    },
    "else": {
      "type": "VariableName",
      "value": "tail"
    }
  },
  "else": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "==",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "i"
      }
    },
    "then": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "head"
      }
    },
    "else": {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "VariableName",
        "value": "replacement"
      },
      "left": {
        "type": "VariableName",
        "value": "tail"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "a": "get",
    "i": 1,
    "replacement": false
  },
  "parent": {
    "variables": {
      "head": 10,
      "tail": 20
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.7592811584472656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "get"
    },
    {
      "type": "Number",
      "value": 1
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cell"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.1797442436218262 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "x"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "cdr"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.4875459671020508 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
20
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "x"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "cdr"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.697843074798584 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0038399696350097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
There is a functionName = loop
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "functionName": "loop",
  "variables": [
    {
      "value": "n"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": ">",
      "right": {
        "type": "Number",
        "value": 0
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    },
    "then": {
      "type": "Binary",
      "operator": "+",
      "right": {
        "args": [
          {
            "type": "Binary",
            "operator": "-",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "n"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "loop"
        }
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    },
    "else": {
      "type": "Number",
      "value": 0
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.052150726318359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 100
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0016527175903320312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 100
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 100
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00125885009765625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 100
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 100
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013966560363769531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 100
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1772480010986328 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 100
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011968612670898438 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 100
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 100
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.007483959197998047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 100
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012569427490234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 100
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 100
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014100074768066406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 100
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19807100296020508 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 99
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 99
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00104522705078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 99
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 99
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015850067138671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 99
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17867279052734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 99
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014848709106445312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 99
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 99
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016698837280273438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 99
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013418197631835938 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 99
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 99
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015759468078613281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 99
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20107507705688477 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 98
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 98
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.002295970916748047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 98
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 98
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013279914855957031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 98
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.21353530883789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 98
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.002022266387939453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 98
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 98
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014390945434570312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 98
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008487701416015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 98
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 98
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014162063598632812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 98
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1975231170654297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 97
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 97
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010180473327636719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 97
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 97
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014629364013671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 97
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1603989601135254 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 97
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001010894775390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 97
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 97
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009560585021972656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 97
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008440017700195312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 97
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 97
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015478134155273438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 97
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17082834243774414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 96
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 96
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010638236999511719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 96
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 96
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014476776123046875 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 96
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16461992263793945 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 96
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009989738464355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 96
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 96
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000942230224609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 96
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009088516235351562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 96
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 96
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015063285827636719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 96
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1656651496887207 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 95
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 95
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010161399841308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 95
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 95
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014019012451171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 95
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17578506469726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 95
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009832382202148438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 95
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 95
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00098419189453125 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 95
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008993148803710938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 95
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 95
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015230178833007812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 95
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16598272323608398 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 94
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 94
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009317398071289062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 94
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 94
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014638900756835938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 94
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17896413803100586 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 94
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009541511535644531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 94
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 94
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009570121765136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 94
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009293556213378906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 94
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 94
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014286041259765625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 94
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16334295272827148 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 93
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 93
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009679794311523438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 93
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 93
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001239776611328125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 93
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1752152442932129 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 93
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009026527404785156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 93
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 93
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008721351623535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 93
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009245872497558594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 93
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 93
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015239715576171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 93
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1777629852294922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 92
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 92
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009298324584960938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 92
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 92
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012898445129394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 92
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17446517944335938 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 92
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009980201721191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 92
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 92
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00093841552734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 92
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009436607360839844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 92
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 92
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014548301696777344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 92
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16414880752563477 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 91
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 91
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009188652038574219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 91
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 91
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013709068298339844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 91
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17868995666503906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 91
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010523796081542969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 91
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 91
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009703636169433594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 91
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008959770202636719 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 91
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 91
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013799667358398438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 91
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16500282287597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 90
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 90
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009260177612304688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 90
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 90
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014710426330566406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 90
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1650528907775879 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 90
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009546279907226562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 90
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 90
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009021759033203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 90
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009198188781738281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 90
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 90
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013680458068847656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 90
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16337299346923828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 89
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 89
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009732246398925781 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 89
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 89
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014119148254394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 89
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16274690628051758 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 89
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009942054748535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 89
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 89
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009822845458984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 89
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014200210571289062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 89
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 89
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014448165893554688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 89
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17556428909301758 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 88
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 88
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010390281677246094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 88
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 88
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014591217041015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 88
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16336774826049805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 88
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009951591491699219 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 88
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 88
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010080337524414062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 88
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010480880737304688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 88
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 88
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011353492736816406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 88
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17463016510009766 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 87
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 87
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009741783142089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 87
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 87
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012979507446289062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 87
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1715412139892578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 87
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009989738464355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 87
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 87
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009336471557617188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 87
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009708404541015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 87
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 87
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00133514404296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 87
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16411399841308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 86
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 86
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009393692016601562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 86
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 86
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014929771423339844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 86
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1643977165222168 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 86
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010218620300292969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 86
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 86
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009021759033203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 86
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.007430076599121094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 86
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 86
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013546943664550781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 86
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1716442108154297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 85
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 85
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009450912475585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 85
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 85
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013608932495117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 85
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16543197631835938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 85
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0020318031311035156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 85
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 85
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011768341064453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 85
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010309219360351562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 85
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 85
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017938613891601562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 85
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18865394592285156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 84
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 84
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010328292846679688 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 84
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 84
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014448165893554688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 84
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16275405883789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 84
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010933876037597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 84
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 84
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00096893310546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 84
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009131431579589844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 84
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 84
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001628875732421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 84
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17537164688110352 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 83
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 83
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009331703186035156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 83
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 83
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014410018920898438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 83
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1684432029724121 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 83
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009069442749023438 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 83
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 83
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009160041809082031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 83
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009288787841796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 83
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 83
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014977455139160156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 83
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.41303586959838867 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 82
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 82
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0019240379333496094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 82
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 82
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016560554504394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 82
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19293880462646484 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 82
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00164794921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 82
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 82
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001422882080078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 82
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011239051818847656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 82
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 82
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015358924865722656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 82
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17348289489746094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 81
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 81
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011849403381347656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 81
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 81
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011363029479980469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 81
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18137407302856445 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 81
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010457038879394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 81
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 81
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010671615600585938 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 81
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009222030639648438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 81
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 81
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001392364501953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 81
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16545724868774414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 80
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 80
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010204315185546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 80
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 80
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013990402221679688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 80
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16383600234985352 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 80
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010099411010742188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 80
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 80
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009732246398925781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 80
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009450912475585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 80
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 80
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014147758483886719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 80
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16318082809448242 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 79
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 79
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009508132934570312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 79
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 79
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012731552124023438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 79
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17787599563598633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 79
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010223388671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 79
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 79
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000965118408203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 79
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000881195068359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 79
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 79
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00148773193359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 79
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17157220840454102 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 78
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 78
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013570785522460938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 78
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 78
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013456344604492188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 78
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19184541702270508 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 78
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001461029052734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 78
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 78
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014238357543945312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 78
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013651847839355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 78
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 78
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013346672058105469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 78
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1924753189086914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 77
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 77
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001651763916015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 77
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 77
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0027990341186523438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 77
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.2316737174987793 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 77
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014781951904296875 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 77
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 77
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013260841369628906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 77
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001190185546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 77
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 77
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013599395751953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 77
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18647193908691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 76
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 76
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013241767883300781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 76
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 76
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013818740844726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 76
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.21668100357055664 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 76
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016751289367675781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 76
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 76
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012907981872558594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 76
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012521743774414062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 76
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 76
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00131988525390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 76
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20335912704467773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 75
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 75
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0018630027770996094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 75
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 75
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014753341674804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 75
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.2084040641784668 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 75
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016040802001953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 75
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 75
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013318061828613281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 75
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013790130615234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 75
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 75
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013480186462402344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 75
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18494176864624023 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 74
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 74
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00131988525390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 74
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 74
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013842582702636719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 74
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20101070404052734 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 74
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015478134155273438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 74
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 74
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013360977172851562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 74
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011358261108398438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 74
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 74
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013818740844726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 74
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20137310028076172 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 73
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 73
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016160011291503906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 73
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 73
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001445770263671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 73
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19773292541503906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 73
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0018987655639648438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 73
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 73
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.003261089324951172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 73
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017652511596679688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 73
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 73
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012488365173339844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 73
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19451522827148438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 72
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 72
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016384124755859375 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 72
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 72
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014486312866210938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 72
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19976186752319336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 72
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.006831169128417969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 72
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 72
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015850067138671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 72
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017957687377929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 72
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 72
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012598037719726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 72
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18596601486206055 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 71
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 71
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015521049499511719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 71
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 71
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013637542724609375 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 71
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1898493766784668 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 71
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014829635620117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 71
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 71
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015430450439453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 71
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013909339904785156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 71
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 71
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015859603881835938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 71
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19903802871704102 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 70
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 70
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015802383422851562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 70
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 70
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012450218200683594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 70
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.8043665885925293 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 70
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0026960372924804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 70
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 70
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015902519226074219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 70
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001605987548828125 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 70
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 70
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001445770263671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 70
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20951414108276367 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 69
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 69
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00162506103515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 69
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 69
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001560211181640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 69
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.201416015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 69
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013179779052734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 69
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 69
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0018758773803710938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 69
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012798309326171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 69
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 69
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012578964233398438 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 69
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20624589920043945 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 68
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 68
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015158653259277344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 68
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 68
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001377105712890625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 68
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20268487930297852 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 68
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013599395751953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 68
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 68
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012879371643066406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 68
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012640953063964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 68
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 68
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001194000244140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 68
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17734003067016602 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 67
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 67
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014810562133789062 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 67
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 67
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013136863708496094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 67
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18696355819702148 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 67
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001583099365234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 67
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 67
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013136863708496094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 67
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00131988525390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 67
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 67
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011687278747558594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 67
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20148420333862305 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 66
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 66
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.004621982574462891 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 66
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 66
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012230873107910156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 66
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19670486450195312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 66
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015001296997070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 66
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 66
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015211105346679688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 66
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014047622680664062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 66
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 66
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001384735107421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 66
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19507122039794922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 65
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 65
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017600059509277344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 65
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 65
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001331329345703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 65
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20224285125732422 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 65
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0019540786743164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 65
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 65
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015039443969726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 65
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013937950134277344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 65
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 65
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013780593872070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +2ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 65
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 1.8790969848632812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 64
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 64
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0024242401123046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 64
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 64
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015749931335449219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 64
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.2001047134399414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 64
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00167083740234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 64
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 64
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016307830810546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 64
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013289451599121094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 64
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 64
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012669563293457031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 64
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16361379623413086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 63
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 63
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016889572143554688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 63
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 63
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013980865478515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 63
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1957559585571289 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 63
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017046928405761719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 63
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 63
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013079643249511719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 63
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014882087707519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 63
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 63
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014371871948242188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 63
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18393802642822266 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 62
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 62
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015087127685546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 62
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 62
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011668205261230469 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 62
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.7272281646728516 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 62
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.002295970916748047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 62
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 62
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017061233520507812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 62
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013818740844726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 62
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 62
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011076927185058594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 62
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1491403579711914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 61
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 61
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012030601501464844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 61
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 61
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001262664794921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 61
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1688699722290039 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 61
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00142669677734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 61
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 61
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013966560363769531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 61
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001461029052734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 61
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 61
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011920928955078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 61
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16941022872924805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 60
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 60
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014753341674804688 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 60
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 60
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014634132385253906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 60
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16955184936523438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 60
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0019421577453613281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 60
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 60
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016140937805175781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 60
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012698173522949219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 60
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 60
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005340576171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 60
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.2011890411376953 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 59
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 59
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010638236999511719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 59
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 59
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004982948303222656 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 59
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16368770599365234 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 59
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011110305786132812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 59
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 59
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010581016540527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 59
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009570121765136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 59
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 59
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004496574401855469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 59
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16945695877075195 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 58
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 58
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00115966796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 58
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 58
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004897117614746094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 58
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17223405838012695 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 58
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010290145874023438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 58
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 58
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010929107666015625 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 58
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009260177612304688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 58
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 58
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00045680999755859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 58
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15814924240112305 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 57
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 57
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014109611511230469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 57
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 57
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004658699035644531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 57
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18093299865722656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 57
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011429786682128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 57
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 57
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011968612670898438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 57
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009799003601074219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 57
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 57
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005369186401367188 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 57
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17461395263671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 56
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 56
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012378692626953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 56
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 56
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005331039428710938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 56
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1707777976989746 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 56
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013132095336914062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 56
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 56
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001220703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 56
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010519027709960938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 56
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 56
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004439353942871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 56
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17486095428466797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 55
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011200904846191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 55
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004229545593261719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 55
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1599750518798828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 55
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009012222290039062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 55
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009779930114746094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 55
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0018029212951660156 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 55
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007429122924804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 55
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19586563110351562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 54
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 54
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00141143798828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 54
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 54
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010929107666015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 54
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.695307731628418 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 54
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0019702911376953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 54
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 54
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013632774353027344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 54
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008578300476074219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 54
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 54
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000530242919921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 54
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18394088745117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 53
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 53
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.015333175659179688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 53
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 53
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005249977111816406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 53
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1870417594909668 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 53
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011281967163085938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 53
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 53
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011162757873535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 53
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009579658508300781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 53
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 53
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004391670227050781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 53
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.24529027938842773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 52
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 52
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011763572692871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 52
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 52
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004010200500488281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 52
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1655888557434082 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 52
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010838508605957031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 52
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 52
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011868476867675781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 52
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008697509765625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 52
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 52
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004601478576660156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 52
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17097997665405273 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 51
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 51
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00110626220703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 51
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 51
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005469322204589844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 51
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16732406616210938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 51
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010542869567871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 51
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 51
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000926971435546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 51
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010180473327636719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 51
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 51
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005593299865722656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 51
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1778397560119629 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 50
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 50
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011868476867675781 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 50
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 50
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005712509155273438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 50
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18511629104614258 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 50
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008440017700195312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 50
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 50
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000988006591796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 50
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006990432739257812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 50
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 50
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004601478576660156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 50
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1556992530822754 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 49
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 49
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007920265197753906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 49
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 49
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005159378051757812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 49
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1687922477722168 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 49
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007548332214355469 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 49
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 49
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008406639099121094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 49
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008983612060546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 49
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 49
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005631446838378906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 49
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20816993713378906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 48
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 48
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010285377502441406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 48
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 48
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006470680236816406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 48
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18097496032714844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 48
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010528564453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 48
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 48
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012369155883789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 48
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010027885437011719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 48
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 48
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007419586181640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 48
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.164031982421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 47
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 47
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010647773742675781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 47
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 47
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008020401000976562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 47
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.5013251304626465 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 47
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015730857849121094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 47
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 47
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014352798461914062 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 47
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013203620910644531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 47
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 47
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000621795654296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 47
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17957687377929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 46
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 46
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001338958740234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 46
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 46
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006017684936523438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 46
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20836687088012695 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 46
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015878677368164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 46
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 46
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011439323425292969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 46
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010809898376464844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 46
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 46
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005340576171875 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 46
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1558089256286621 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 45
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 45
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007481575012207031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 45
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 45
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005064010620117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 45
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15476703643798828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 45
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000885009765625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 45
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 45
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007748603820800781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 45
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00875234603881836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 45
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 45
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005221366882324219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 45
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1627812385559082 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 44
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 44
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008029937744140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 44
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 44
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004901885986328125 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 44
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15275192260742188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 44
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007719993591308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 44
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 44
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007081031799316406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 44
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007243156433105469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 44
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 44
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005087852478027344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 44
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15127801895141602 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 43
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 43
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007300376892089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 43
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 43
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005092620849609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 43
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16106796264648438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 43
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012378692626953125 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 43
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 43
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007882118225097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 43
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008091926574707031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 43
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 43
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0003838539123535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 43
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1461172103881836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 42
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 42
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000762939453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 42
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 42
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004968643188476562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 42
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20429611206054688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 42
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000888824462890625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 42
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 42
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00084686279296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 42
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007309913635253906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 42
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 42
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000530242919921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 42
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15300703048706055 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 41
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 41
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007300376892089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 41
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 41
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004968643188476562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 41
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15107011795043945 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 41
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007300376892089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 41
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 41
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007100105285644531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 41
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007333755493164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 41
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 41
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000499725341796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 41
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16121292114257812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 40
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 40
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007548332214355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 40
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 40
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005092620849609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 40
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15068578720092773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 40
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007534027099609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 40
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 40
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007309913635253906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 40
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006909370422363281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 40
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 40
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00046539306640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 40
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15728378295898438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 39
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 39
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007338523864746094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 39
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 39
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005006790161132812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 39
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16038084030151367 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 39
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011320114135742188 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 39
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 39
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013408660888671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 39
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010633468627929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 39
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 39
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005340576171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 39
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18713092803955078 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 38
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 38
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008540153503417969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 38
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 38
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005249977111816406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 38
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15115690231323242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 38
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007939338684082031 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 38
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 38
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008311271667480469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 38
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007052421569824219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 38
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 38
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004658699035644531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 38
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16017484664916992 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 37
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 37
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007462501525878906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 37
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 37
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005021095275878906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 37
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15191221237182617 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 37
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008921623229980469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 37
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 37
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008611679077148438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 37
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007309913635253906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 37
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 37
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00049591064453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 37
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1502389907836914 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 36
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 36
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007710456848144531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 36
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 36
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00048828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 36
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15206575393676758 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 36
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00075531005859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 36
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 36
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007061958312988281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 36
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007281303405761719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 36
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 36
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004987716674804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 36
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15855073928833008 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 35
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 35
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007567405700683594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 35
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 35
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004711151123046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 35
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15407514572143555 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 35
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007491111755371094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 35
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 35
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007610321044921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 35
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007410049438476562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 35
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 35
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004911422729492188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 35
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15254640579223633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 34
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 34
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007810592651367188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 34
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 34
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005140304565429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 34
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16140413284301758 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 34
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007939338684082031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 34
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 34
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007548332214355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 34
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007672309875488281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 34
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 34
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004911422729492188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 34
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15161705017089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 33
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 33
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007481575012207031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 33
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 33
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004878044128417969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 33
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15720510482788086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 33
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007910728454589844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 33
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 33
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007300376892089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 33
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00074005126953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 33
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 33
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005011558532714844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 33
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15547990798950195 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 32
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 32
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015149116516113281 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 32
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 32
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006732940673828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 32
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.23006725311279297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 32
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014753341674804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 32
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 32
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017681121826171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 32
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010762214660644531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 32
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 32
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005397796630859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 32
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17852020263671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 31
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 31
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009341239929199219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 31
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 31
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005125999450683594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 31
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17343711853027344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 31
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014472007751464844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 31
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 31
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011248588562011719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 31
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0019450187683105469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 31
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 31
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008969306945800781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 31
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.2704892158508301 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 30
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 30
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012693405151367188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 30
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 30
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005459785461425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 30
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17577314376831055 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 30
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016942024230957031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 30
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 30
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014858245849609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 30
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012660026550292969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 30
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 30
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005040168762207031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 30
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1663203239440918 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 29
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 29
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008721351623535156 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 29
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 29
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007319450378417969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 29
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19561290740966797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 29
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015840530395507812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 29
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 29
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00144195556640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 29
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011878013610839844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 29
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 29
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006341934204101562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 29
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1875901222229004 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 28
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 28
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011768341064453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 28
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 28
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006031990051269531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 28
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17241191864013672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 28
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011205673217773438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 28
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 28
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012273788452148438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 28
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010590553283691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 28
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 28
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008859634399414062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 28
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17760276794433594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 27
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 27
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012121200561523438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 27
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 27
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006051063537597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 27
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18424415588378906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 27
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011501312255859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 27
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 27
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001445770263671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 27
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010461807250976562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 27
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 27
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007991790771484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 27
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18143177032470703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 26
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 26
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011582374572753906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 26
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 26
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000640869140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 26
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.2833590507507324 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 26
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013132095336914062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 26
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 26
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0020380020141601562 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 26
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011410713195800781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 26
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 26
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005803108215332031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 26
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19283294677734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 25
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 25
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0016679763793945312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 25
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 25
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005221366882324219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 25
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16120529174804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 25
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011467933654785156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 25
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 25
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012869834899902344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 25
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009999275207519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 25
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 25
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006260871887207031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 25
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17520713806152344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 24
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 24
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010819435119628906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 24
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 24
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005898475646972656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 24
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18010902404785156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 24
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001277923583984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 24
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 24
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009708404541015625 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 24
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010709762573242188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 24
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 24
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005321502685546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 24
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17110109329223633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 23
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 23
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011420249938964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 23
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 23
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006122589111328125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 23
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1706233024597168 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 23
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017943382263183594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 23
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 23
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013523101806640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 23
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011410713195800781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 23
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 23
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007872581481933594 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 23
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.21186017990112305 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 22
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 22
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012731552124023438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 22
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 22
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006732940673828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 22
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17944097518920898 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 22
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014657974243164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 22
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 22
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010991096496582031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 22
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011839866638183594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 22
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 22
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006327629089355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 22
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16858196258544922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 21
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008707046508789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 21
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005869865417480469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 21
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15236806869506836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 21
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010099411010742188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 21
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013470649719238281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 21
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010437965393066406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 21
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00069427490234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 21
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.18864727020263672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 20
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0015530586242675781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 20
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007710456848144531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 20
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.19724512100219727 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 20
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010409355163574219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 20
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00144195556640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 20
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011620521545410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 20
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005283355712890625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 20
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16251039505004883 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 19
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 19
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008306503295898438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 19
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 19
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006899833679199219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 19
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17551803588867188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 19
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008950233459472656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 19
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 19
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010280609130859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 19
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009140968322753906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 19
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 19
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005278587341308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 19
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16071224212646484 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 18
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 18
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007867813110351562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 18
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 18
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005593299865722656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 18
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16677379608154297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 18
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010089874267578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 18
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 18
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011782646179199219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 18
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001026153564453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 18
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 18
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007081031799316406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 18
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16157102584838867 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 17
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 17
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008759498596191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 17
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 17
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005640983581542969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 17
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16370010375976562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 17
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001232147216796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 17
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 17
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009999275207519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 17
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011801719665527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 17
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 17
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006380081176757812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 17
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16764307022094727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 16
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 16
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00084686279296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 16
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 16
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007047653198242188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 16
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15706729888916016 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 16
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011301040649414062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 16
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 16
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011110305786132812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 16
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00116729736328125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 16
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 16
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004830360412597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 16
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15814781188964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 15
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 15
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007810592651367188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 15
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 15
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005750656127929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 15
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16330385208129883 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 15
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011539459228515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 15
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 15
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009808540344238281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 15
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009813308715820312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 15
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 15
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007519721984863281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 15
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.20934295654296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 14
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 14
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010099411010742188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 14
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 14
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005316734313964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 14
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.161865234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 14
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009069442749023438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 14
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 14
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.008219718933105469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 14
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013480186462402344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 14
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 14
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005550384521484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 14
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16036510467529297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 13
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008053779602050781 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 13
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007519721984863281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 13
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15468168258666992 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 13
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011081695556640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 13
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008411407470703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 13
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009560585021972656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 13
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005383491516113281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 13
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15760421752929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 12
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 12
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008692741394042969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 12
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 12
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005679130554199219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 12
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15480899810791016 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 12
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012192726135253906 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 12
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 12
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012350082397460938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 12
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010752677917480469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 12
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 12
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0006690025329589844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 12
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1621842384338379 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 11
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 11
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008783340454101562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 11
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 11
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005078315734863281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 11
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16042709350585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 11
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009341239929199219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 11
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 11
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008368492126464844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 11
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012288093566894531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 11
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 11
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005698204040527344 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 11
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15961074829101562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008707046508789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.000514984130859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15462970733642578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008258819580078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011429786682128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008263587951660156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005769729614257812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1717209815979004 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 9
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008349418640136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 9
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005693435668945312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17094898223876953 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010390281677246094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 9
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010509490966796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011119842529296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 9
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007228851318359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16667413711547852 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008420944213867188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005140304565429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17063093185424805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009837150573730469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011339187622070312 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011219978332519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005469322204589844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1670999526977539 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007958412170410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005140304565429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15306568145751953 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010600090026855469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011148452758789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011491775512695312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005130767822265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15882635116577148 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008039474487304688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005750656127929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15928363800048828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010356903076171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010137557983398438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009779930114746094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005331039428710938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1685929298400879 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014109611511230469 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009551048278808594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1640768051147461 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008249282836914062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0013432502746582031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0012059211730957031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005707740783691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15268898010253906 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008440017700195312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005259513854980469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.16396093368530273 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.001033782958984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011739730834960938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009508132934570312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004668235778808594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15393686294555664 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007863044738769531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004911422729492188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15979909896850586 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.00090789794921875 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010857582092285156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009298324584960938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005278587341308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15190982818603516 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007719993591308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004787445068359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1495652198791504 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0014629364013671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0010461807250976562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009722709655761719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005121231079101562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15306901931762695 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007386207580566406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0004878044128417969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.1469869613647461 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0008220672607421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "loop"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0017108917236328125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0011892318725585938 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007152557373046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.17125272750854492 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0009698867797851562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0005970001220703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": ">",
  "right": {
    "type": "Number",
    "value": 0
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.15805816650390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 0
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.0007500648498535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.33080387115478516 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 0.7778620719909668 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 1.3628463745117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 1.6962318420410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 2.129521369934082 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 2.2899303436279297 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 2.614227771759033 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 3.031558036804199 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 3.198674201965332 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 3.537684917449951 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 3.9945340156555176 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 4.15829610824585 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 4.486363887786865 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 4.908009052276611 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 5.105323791503906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 15
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 5.450324058532715 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 15
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 6.441051959991455 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 15
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 6.615268707275391 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 6.955955982208252 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 7.397939205169678 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 7.644677639007568 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 28
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 7.975491046905518 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 28
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 8.43632984161377 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 28
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 8.604319095611572 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 36
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 8.946180820465088 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 36
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 9.379157066345215 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 36
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 9.573476791381836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 45
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 9.915884971618652 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 45
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 10.369133949279785 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 45
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 10.532474994659424 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 10.86510181427002 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 11
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 11.306802749633789 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 11
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 11.467658996582031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 66
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 11
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 11.8060622215271 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 66
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 12
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 12.260694980621338 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 66
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 12
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 12.433905124664307 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 78
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 12
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 12.758121013641357 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 78
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 13
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 13.206320762634277 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 78
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 13
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 13.58051872253418 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 91
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 13
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 13.909342288970947 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 91
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 14
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 14.359695434570312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 91
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 14
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 14.517441272735596 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 105
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 14
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 14.8610258102417 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 105
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 15
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 15.355963230133057 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 105
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 15
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 15.563002109527588 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 120
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 15
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 15.902117252349854 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 120
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 16
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 16.342336177825928 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 120
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 16
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 16.505420207977295 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 136
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 16
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 16.8490629196167 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 136
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 17
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 17.29141330718994 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 136
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 17
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 17.458892822265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 153
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 17
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 17.79339027404785 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 153
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 18
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 18.2393159866333 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 153
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 18
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 18.407875061035156 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 171
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 18
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 18.737279891967773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 171
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 19
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 19.16614007949829 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 171
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 19
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 19.328639030456543 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 190
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 19
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 19.679324626922607 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 190
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 20
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 20.13986825942993 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 190
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 20
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 20.30171489715576 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 210
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 20
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 20.669697284698486 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 210
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 21
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 21.135622024536133 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 210
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 21
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 21.29388999938965 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 231
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 21
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 21.6142258644104 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 231
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 22
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 22.07598304748535 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 231
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 22
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 22.26367998123169 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 253
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 22
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 22.68370008468628 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 253
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 23
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 23.189258098602295 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 253
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 23
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 23.382325172424316 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 276
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 23
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 23.713839054107666 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 276
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 24
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 24.175195693969727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 276
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 24
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 24.343146324157715 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 300
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 24
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 24.690939903259277 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 300
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 25
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 25.12836217880249 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 300
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 25
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 25.3110408782959 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 325
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 25
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 25.649909019470215 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 325
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 26
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 26.196779251098633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 325
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 26
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 26.896603107452393 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 351
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 26
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 27.354646682739258 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 351
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 27
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 27.8403263092041 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 351
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 27
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 28.007012844085693 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 378
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 27
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 28.37170171737671 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 378
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 28
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 28.860783100128174 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 378
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 28
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 29.05079984664917 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 406
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 28
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 29.40229892730713 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 406
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 29
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 29.86997079849243 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 406
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 29
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 30.049991130828857 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 435
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 29
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 30.445405960083008 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 435
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 30
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 30.912386894226074 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 435
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 30
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 31.08027982711792 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 465
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 30
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 31.462984561920166 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 465
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 31
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 32.990954875946045 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 465
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 31
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 33.17276430130005 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 496
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 31
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 33.555211544036865 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 496
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 32
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 34.03722906112671 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 496
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 32
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 34.21282196044922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 528
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 32
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 34.63644599914551 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 528
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 33
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 35.76781606674194 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 528
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 33
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 35.93080186843872 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 561
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 33
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 36.248899936676025 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 561
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 34
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 36.65854597091675 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 561
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 34
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 36.81211805343628 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 595
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 34
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 37.13766574859619 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 595
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 35
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 37.54518461227417 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 595
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 35
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 37.701889991760254 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 630
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 35
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 38.023090839385986 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 630
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 36
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 38.450918197631836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 630
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 36
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 38.610493183135986 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 666
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 36
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 38.92251205444336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 666
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 37
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 39.34055185317993 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 666
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 37
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 39.49692630767822 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 703
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 37
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 39.811285972595215 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 703
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 38
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 40.23416996002197 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 703
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 38
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 40.390586376190186 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 741
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 38
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 40.70175743103027 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 741
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 39
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 41.155399322509766 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 741
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 39
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 41.33768606185913 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 780
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 39
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 42.126996994018555 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 780
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 40
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 42.54546594619751 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 780
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 40
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 42.69911289215088 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 820
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 40
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 43.007359981536865 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 820
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 41
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 43.4316840171814 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 820
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 41
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 43.598355770111084 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 861
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 41
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 43.90414237976074 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 861
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 42
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 44.33332681655884 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 861
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 42
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 44.482046127319336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 903
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 42
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 44.865270137786865 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 903
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 43
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 45.26321315765381 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 903
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 43
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 45.61533498764038 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 946
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 43
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 45.94765377044678 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 946
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 44
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 46.36633014678955 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 946
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 44
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 46.54334306716919 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 990
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 44
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 46.870545387268066 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 990
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 45
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 47.28224039077759 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 990
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 45
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 47.438257694244385 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1035
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 45
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 47.84288692474365 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1035
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 46
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 48.271467208862305 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1035
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 46
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 48.44309997558594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1081
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 46
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 48.854557037353516 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1081
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 47
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 49.34911584854126 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1081
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 47
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 49.53513288497925 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1128
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 47
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 50.21872425079346 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1128
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 48
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 50.666869163513184 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1128
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 48
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 50.83220434188843 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1176
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 48
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 51.202616691589355 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1176
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 49
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 51.68006467819214 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1176
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 49
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 51.841158866882324 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1225
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 49
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 52.177566051483154 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1225
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 50
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 52.609843730926514 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1225
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 50
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 52.772014141082764 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1275
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 50
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 53.12496757507324 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1275
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 51
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 53.612637996673584 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1275
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 51
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 53.771904945373535 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1326
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 51
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 54.11983299255371 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1326
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 52
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 54.60245084762573 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1326
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 52
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 54.76498603820801 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1378
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 52
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 55.10807228088379 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1378
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 53
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 55.62332725524902 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1378
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 53
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 55.80103778839111 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1431
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 53
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 56.158607959747314 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1431
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 54
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 56.63139295578003 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1431
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 54
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 56.81255769729614 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1485
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 54
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 57.691306591033936 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1485
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 55
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 58.67819404602051 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1485
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 55
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 58.840835094451904 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1540
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 55
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 59.16183519363403 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1540
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 56
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 59.67019081115723 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1540
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 56
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 59.83640909194946 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1596
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 56
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 60.18246126174927 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1596
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 57
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 60.778740882873535 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1596
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 57
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 60.96463489532471 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1653
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 57
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 61.3187689781189 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1653
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 58
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 61.76032829284668 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1653
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 58
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 61.947636127471924 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1711
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 58
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 62.280508041381836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1711
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 59
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 62.72119426727295 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1711
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 59
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 62.89515495300293 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1770
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 59
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 63.23704242706299 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1770
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 60
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 63.80269384384155 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1770
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 60
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 63.983734130859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1830
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 60
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 64.35165500640869 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1830
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 61
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 64.80665588378906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1830
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 61
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 64.9655556678772 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1891
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 61
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 65.32023000717163 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1891
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 62
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 65.7499270439148 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1891
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 62
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 65.92233085632324 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1953
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 62
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 66.92232704162598 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1953
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 63
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 67.39117622375488 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1953
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 63
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 67.55665397644043 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2016
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 63
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 67.9177680015564 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2016
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 64
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 68.36669397354126 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2016
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 64
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 68.55171775817871 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2080
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 64
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 68.92461919784546 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2080
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 65
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 71.12748289108276 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2080
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 65
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 71.31331634521484 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2145
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 65
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 71.69982624053955 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2145
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 66
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 72.24983167648315 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2145
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 66
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 72.43515920639038 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2211
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 66
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 72.82671785354614 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2211
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 67
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 73.36597013473511 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2211
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 67
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 73.54482126235962 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2278
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 67
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 73.92379188537598 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2278
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 68
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 74.70103693008423 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2278
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 68
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 74.86632537841797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2346
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 68
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 75.24874210357666 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2346
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 69
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 75.76519393920898 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2346
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 69
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 75.9545350074768 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2415
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 69
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 76.33231925964355 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2415
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 70
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 76.86395215988159 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2415
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 70
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 77.0590353012085 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2485
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 70
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 78.10394430160522 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2485
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 71
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 78.63148975372314 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2485
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 71
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 78.81349325180054 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2556
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 71
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 79.17862606048584 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2556
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 72
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 79.69675779342651 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2556
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 72
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 79.88187789916992 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2628
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 72
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 80.28307294845581 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2628
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 73
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 80.78204488754272 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2628
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 73
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 80.99633932113647 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2701
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 73
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 81.36720561981201 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2701
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 74
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 81.8869833946228 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2701
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 74
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 82.07566499710083 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2775
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 74
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 82.47306966781616 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2775
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 75
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 82.95418787002563 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2775
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 75
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 83.12365102767944 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2850
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 75
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 83.54465007781982 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2850
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 76
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 84.061448097229 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2850
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 76
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 84.24484157562256 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2926
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 76
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 84.64123296737671 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2926
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 77
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 85.10020685195923 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2926
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 77
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 85.26968479156494 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3003
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 77
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 85.69344806671143 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3003
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 78
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 86.18058919906616 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3003
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 78
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 86.35900402069092 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3081
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 78
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 86.7250566482544 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3081
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 79
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 87.1602087020874 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3081
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 79
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 87.32934379577637 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3160
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 79
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 87.66965532302856 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3160
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 80
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 88.09498596191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3160
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 80
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 88.26249122619629 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3240
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 80
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 88.59327936172485 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3240
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 81
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 89.03078508377075 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3240
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 81
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 89.19950103759766 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3321
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 81
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 89.54433107376099 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3321
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 82
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 90.09609794616699 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3321
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 82
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 90.27675533294678 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3403
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 82
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 90.66005897521973 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3403
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 83
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 91.37481212615967 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3403
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 83
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 91.52896118164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3486
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 83
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 91.87373113632202 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3486
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 84
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 92.34780216217041 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3486
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 84
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 92.50809144973755 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3570
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 84
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 92.83570671081543 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3570
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 85
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 93.30456495285034 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3570
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 85
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 93.76547622680664 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3655
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 85
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 94.09763717651367 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3655
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 86
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 94.53696489334106 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3655
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 86
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 94.69949340820312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3741
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 86
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 95.03502321243286 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3741
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 87
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 95.4690489768982 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3741
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 87
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 95.62469577789307 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3828
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 87
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 95.96734619140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3828
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 88
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 96.41522407531738 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3828
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 88
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 96.58360290527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3916
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 88
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 96.91270780563354 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3916
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 89
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 97.36432218551636 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3916
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 89
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 97.53586292266846 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4005
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 89
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 97.87306213378906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4005
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 90
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 98.3093409538269 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4005
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 90
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 98.46482515335083 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4095
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 90
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 98.7949857711792 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4095
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 91
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 99.21445178985596 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4095
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 91
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 99.37470579147339 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4186
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 91
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 99.718985080719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4186
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 92
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 100.1547303199768 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4186
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 92
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 100.32049179077148 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4278
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 92
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 100.66783905029297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4278
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 93
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 101.09902095794678 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4278
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 93
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 101.2554440498352 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4371
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 93
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 101.61154365539551 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4371
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 94
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 102.04106998443604 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4371
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 94
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 102.20914888381958 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4465
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 94
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 102.55531978607178 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4465
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 95
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 102.98651695251465 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4465
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 95
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 103.15308141708374 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4560
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 95
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 103.4960880279541 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4560
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 96
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 103.93367290496826 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4560
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 96
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 104.0930380821228 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4656
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 96
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 104.43191623687744 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4656
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 97
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 104.88223695755005 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4656
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 97
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 105.05045700073242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4753
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 97
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 105.37336301803589 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4753
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 98
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 105.84111595153809 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4753
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 98
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 106.02680015563965 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4851
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 98
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 106.43004703521729 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4851
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 99
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 106.92017316818237 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4851
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 99
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 107.08090782165527 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4950
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 99
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 107.46081209182739 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4950
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "loop"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 100
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 107.97291326522827 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4950
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "loop"
    }
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 100
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 108.1597809791565 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5050
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": ">",
    "right": {
      "type": "Number",
      "value": 0
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "loop"
      }
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "else": {
    "type": "Number",
    "value": 0
  }
}, environment: Enviroment = {
  "variables": {
    "n": 100
  },
  "parent": {
    "variables": {},
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "anonymous lambda"
  },
  "name": "anonymous lambda"
})." took: 108.5169243812561 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5050
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "FunctionCall",
  "fn": {
    "type": "Lambda",
    "functionName": "loop",
    "variables": [
      {
        "value": "n"
      }
    ],
    "body": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": ">",
        "right": {
          "type": "Number",
          "value": 0
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      },
      "then": {
        "type": "Binary",
        "operator": "+",
        "right": {
          "args": [
            {
              "type": "Binary",
              "operator": "-",
              "right": {
                "type": "Number",
                "value": 1
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "loop"
          }
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      },
      "else": {
        "type": "Number",
        "value": 0
      }
    }
  },
  "args": [
    {
      "type": "Number",
      "value": 100
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 108.90248012542725 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5050
}.
 +0ms
5050
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "FunctionCall",
      "fn": {
        "type": "Lambda",
        "functionName": "loop",
        "variables": [
          {
            "value": "n"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": ">",
            "right": {
              "type": "Number",
              "value": 0
            },
            "left": {
              "type": "VariableName",
              "value": "n"
            }
          },
          "then": {
            "type": "Binary",
            "operator": "+",
            "right": {
              "args": [
                {
                  "type": "Binary",
                  "operator": "-",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "n"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "loop"
              }
            },
            "left": {
              "type": "VariableName",
              "value": "n"
            }
          },
          "else": {
            "type": "Number",
            "value": 0
          }
        }
      },
      "args": [
        {
          "type": "Number",
          "value": 100
        }
      ]
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 109.31428623199463 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0006117820739746094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "x"
})." took: 0.0018568038940429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "x": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "x"
})." took: 0.0005860328674316406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "x"
})." took: 0.15409088134765625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "y": 3
  },
  "parent": {
    "variables": {
      "x": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "x"
  },
  "name": "y"
})." took: 0.0010986328125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "y"
}, environment: Enviroment = {
  "variables": {
    "y": 3
  },
  "parent": {
    "variables": {
      "x": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "x"
  },
  "name": "y"
})." took: 0.0010342597961425781 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "VariableName",
    "value": "y"
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "y": 3
  },
  "parent": {
    "variables": {
      "x": 2
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "x"
  },
  "name": "y"
})." took: 0.1454911231994629 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "z": 5
  },
  "parent": {
    "variables": {
      "y": 3
    },
    "parent": {
      "variables": {
        "x": 2
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "y"
  },
  "name": "z"
})." took: 0.007080078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "z": 5
  },
  "parent": {
    "variables": {
      "y": 3
    },
    "parent": {
      "variables": {
        "x": 2
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "y"
  },
  "name": "z"
})." took: 0.00261688232421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "y"
}, environment: Enviroment = {
  "variables": {
    "z": 5
  },
  "parent": {
    "variables": {
      "y": 3
    },
    "parent": {
      "variables": {
        "x": 2
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "y"
  },
  "name": "z"
})." took: 0.0025000572204589844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "VariableName",
    "value": "y"
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "z": 5
  },
  "parent": {
    "variables": {
      "y": 3
    },
    "parent": {
      "variables": {
        "x": 2
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "y"
  },
  "name": "z"
})." took: 0.15683698654174805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "z"
}, environment: Enviroment = {
  "variables": {
    "z": 5
  },
  "parent": {
    "variables": {
      "y": 3
    },
    "parent": {
      "variables": {
        "x": 2
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "y"
  },
  "name": "z"
})." took: 0.0010232925415039062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "type": "VariableName",
    "value": "z"
  },
  "left": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "type": "VariableName",
      "value": "y"
    },
    "left": {
      "type": "VariableName",
      "value": "x"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "z": 5
  },
  "parent": {
    "variables": {
      "y": 3
    },
    "parent": {
      "variables": {
        "x": 2
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "y"
  },
  "name": "z"
})." took: 0.30670738220214844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
10
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "+",
      "right": {
        "type": "VariableName",
        "value": "z"
      },
      "left": {
        "type": "Binary",
        "operator": "+",
        "right": {
          "type": "VariableName",
          "value": "y"
        },
        "left": {
          "type": "VariableName",
          "value": "x"
        }
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "z": 5
  },
  "parent": {
    "variables": {
      "y": 3
    },
    "parent": {
      "variables": {
        "x": 2
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "y"
  },
  "name": "z"
})." took: 0.5189862251281738 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Let",
  "variables": [
    {
      "type": "VariableDefinition",
      "name": "x",
      "definition": {
        "type": "Number",
        "value": 2
      }
    },
    {
      "type": "VariableDefinition",
      "name": "y",
      "definition": {
        "type": "Binary",
        "operator": "+",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "x"
        }
      }
    },
    {
      "type": "VariableDefinition",
      "name": "z",
      "definition": {
        "type": "Binary",
        "operator": "+",
        "right": {
          "type": "VariableName",
          "value": "y"
        },
        "left": {
          "type": "VariableName",
          "value": "x"
        }
      }
    }
  ],
  "body": {
    "args": [
      {
        "type": "Binary",
        "operator": "+",
        "right": {
          "type": "VariableName",
          "value": "z"
        },
        "left": {
          "type": "Binary",
          "operator": "+",
          "right": {
            "type": "VariableName",
            "value": "y"
          },
          "left": {
            "type": "VariableName",
            "value": "x"
          }
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "log"
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.247136116027832 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 10
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0002732276916503906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "x"
})." took: 0.0009288787841796875 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "x": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "x"
})." took: 0.0005049705505371094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "*",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "x"
})." took: 0.1402273178100586 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 20
  },
  "parent": {
    "variables": {
      "x": 10
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "x"
  },
  "name": "x"
})." took: 0.000804901123046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 20
  },
  "parent": {
    "variables": {
      "x": 10
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "x"
  },
  "name": "x"
})." took: 0.0011339187622070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "*",
  "right": {
    "type": "VariableName",
    "value": "x"
  },
  "left": {
    "type": "VariableName",
    "value": "x"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 20
  },
  "parent": {
    "variables": {
      "x": 10
    },
    "parent": {
      "variables": {},
      "name": "global"
    },
    "name": "x"
  },
  "name": "x"
})." took: 0.14440393447875977 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 400
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "y": 400
  },
  "parent": {
    "variables": {
      "x": 20
    },
    "parent": {
      "variables": {
        "x": 10
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "x"
  },
  "name": "y"
})." took: 0.01181793212890625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "y": 400
  },
  "parent": {
    "variables": {
      "x": 20
    },
    "parent": {
      "variables": {
        "x": 10
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "x"
  },
  "name": "y"
})." took: 0.002597332000732422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 20
}.
 +0ms
20
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "x"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "y": 400
  },
  "parent": {
    "variables": {
      "x": 20
    },
    "parent": {
      "variables": {
        "x": 10
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "x"
  },
  "name": "y"
})." took: 0.19728994369506836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "y": 400
  },
  "parent": {
    "variables": {
      "x": 20
    },
    "parent": {
      "variables": {
        "x": 10
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "x"
  },
  "name": "y"
})." took: 0.0021758079528808594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "y"
}, environment: Enviroment = {
  "variables": {
    "y": 400
  },
  "parent": {
    "variables": {
      "x": 20
    },
    "parent": {
      "variables": {
        "x": 10
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "x"
  },
  "name": "y"
})." took: 0.000988006591796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 400
}.
 +0ms
400
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "y"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "y": 400
  },
  "parent": {
    "variables": {
      "x": 20
    },
    "parent": {
      "variables": {
        "x": 10
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "x"
  },
  "name": "y"
})." took: 0.1784219741821289 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "args": [
        {
          "type": "VariableName",
          "value": "x"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    },
    {
      "args": [
        {
          "type": "VariableName",
          "value": "y"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {
    "y": 400
  },
  "parent": {
    "variables": {
      "x": 20
    },
    "parent": {
      "variables": {
        "x": 10
      },
      "parent": {
        "variables": {},
        "name": "global"
      },
      "name": "x"
    },
    "name": "x"
  },
  "name": "y"
})." took: 0.5341620445251465 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Let",
  "variables": [
    {
      "type": "VariableDefinition",
      "name": "x",
      "definition": {
        "type": "Binary",
        "operator": "*",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "x"
        }
      }
    },
    {
      "type": "VariableDefinition",
      "name": "y",
      "definition": {
        "type": "Binary",
        "operator": "*",
        "right": {
          "type": "VariableName",
          "value": "x"
        },
        "left": {
          "type": "VariableName",
          "value": "x"
        }
      }
    }
  ],
  "body": {
    "type": "Program",
    "program": [
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "log"
        }
      },
      {
        "args": [
          {
            "type": "VariableName",
            "value": "y"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "log"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {
    "x": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "x"
})." took: 1.0682930946350098 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {
    "x": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "x"
})." took: 0.003658771514892578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "x"
}, environment: Enviroment = {
  "variables": {
    "x": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "x"
})." took: 0.0011034011840820312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
10
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "VariableName",
      "value": "x"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {
    "x": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "x"
})." took: 0.16527986526489258 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "type": "Let",
      "variables": [
        {
          "type": "VariableDefinition",
          "name": "x",
          "definition": {
            "type": "Binary",
            "operator": "*",
            "right": {
              "type": "Number",
              "value": 2
            },
            "left": {
              "type": "VariableName",
              "value": "x"
            }
          }
        },
        {
          "type": "VariableDefinition",
          "name": "y",
          "definition": {
            "type": "Binary",
            "operator": "*",
            "right": {
              "type": "VariableName",
              "value": "x"
            },
            "left": {
              "type": "VariableName",
              "value": "x"
            }
          }
        }
      ],
      "body": {
        "type": "Program",
        "program": [
          {
            "args": [
              {
                "type": "VariableName",
                "value": "x"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "log"
            }
          },
          {
            "args": [
              {
                "type": "VariableName",
                "value": "y"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "log"
            }
          }
        ]
      }
    },
    {
      "args": [
        {
          "type": "VariableName",
          "value": "x"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {
    "x": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "x"
})." took: 1.4035310745239258 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Let",
  "variables": [
    {
      "type": "VariableDefinition",
      "name": "x",
      "definition": {
        "type": "Number",
        "value": 10
      }
    }
  ],
  "body": {
    "type": "Program",
    "program": [
      {
        "type": "Let",
        "variables": [
          {
            "type": "VariableDefinition",
            "name": "x",
            "definition": {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "Number",
                "value": 2
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          },
          {
            "type": "VariableDefinition",
            "name": "y",
            "definition": {
              "type": "Binary",
              "operator": "*",
              "right": {
                "type": "VariableName",
                "value": "x"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          }
        ],
        "body": {
          "type": "Program",
          "program": [
            {
              "args": [
                {
                  "type": "VariableName",
                  "value": "x"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "log"
              }
            },
            {
              "args": [
                {
                  "type": "VariableName",
                  "value": "y"
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "log"
              }
            }
          ]
        }
      },
      {
        "args": [
          {
            "type": "VariableName",
            "value": "x"
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "log"
        }
      }
    ]
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 1.5706558227539062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [
    {
      "type": "VariableName",
      "value": "n"
    }
  ],
  "body": {
    "type": "If",
    "condition": {
      "type": "Binary",
      "operator": "<",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    },
    "then": {
      "type": "VariableName",
      "value": "n"
    },
    "else": {
      "type": "Binary",
      "operator": "+",
      "right": {
        "args": [
          {
            "type": "Binary",
            "operator": "-",
            "right": {
              "type": "Number",
              "value": 2
            },
            "left": {
              "type": "VariableName",
              "value": "n"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fib"
        }
      },
      "left": {
        "args": [
          {
            "type": "Binary",
            "operator": "-",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "n"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fib"
        }
      }
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.009125232696533203 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Assign",
  "operator": "=",
  "right": {
    "type": "Lambda",
    "variables": [
      {
        "type": "VariableName",
        "value": "n"
      }
    ],
    "body": {
      "type": "If",
      "condition": {
        "type": "Binary",
        "operator": "<",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      },
      "then": {
        "type": "VariableName",
        "value": "n"
      },
      "else": {
        "type": "Binary",
        "operator": "+",
        "right": {
          "args": [
            {
              "type": "Binary",
              "operator": "-",
              "right": {
                "type": "Number",
                "value": 2
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "fib"
          }
        },
        "left": {
          "args": [
            {
              "type": "Binary",
              "operator": "-",
              "right": {
                "type": "Number",
                "value": 1
              },
              "left": {
                "type": "VariableName",
                "value": "n"
              }
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "fib"
          }
        }
      }
    }
  },
  "left": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.11770200729370117 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0018939971923828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "time"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0016117095947265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [],
  "body": {
    "args": [
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.005480289459228516 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "fib(10)"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0006260871887207031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "fib(10)"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.005455970764160156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 10
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007700920104980469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009870529174804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000537872314453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13655710220336914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.003970146179199219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006971359252929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007319450378417969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14203500747680664 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 9
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007839202880859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 9
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004992485046386719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13315200805664062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00102996826171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006799697875976562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 9
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004949569702148438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13465499877929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007829666137695312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006580352783203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13266611099243164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000743865966796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000759124755859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004858970642089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13150453567504883 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007109642028808594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006780624389648438 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13274908065795898 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007901191711425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007352828979492188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000614166259765625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14336013793945312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007319450378417969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004191398620605469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1261444091796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015473365783691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009121894836425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005292892456054688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1498556137084961 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010919570922851562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006279945373535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14411115646362305 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009121894836425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007686614990234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006818771362304688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16238880157470703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007348060607910156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006079673767089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15370988845825195 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008530616760253906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011868476867675781 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006990432739257812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13750314712524414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010151863098144531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004940032958984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15874004364013672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010700225830078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000820159912109375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00043010711669921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1336202621459961 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008111000061035156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00040435791015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13704967498779297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009789466857910156 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008029937744140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00043201446533203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14614105224609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008459091186523438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004787445068359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1387791633605957 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011715888977050781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.30026912689208984 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6951789855957031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.003753662109375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010428428649902344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005431175231933594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14403200149536133 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008292198181152344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006389617919921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1403951644897461 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011463165283203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2899136543273926 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6993489265441895 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5798301696777344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8695168495178223 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.323122024536133 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012807846069335938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010600090026855469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005297660827636719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14285707473754883 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007200241088867188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005564689636230469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1391439437866211 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012841224670410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.289093017578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.714806079864502 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.2096853256225586 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.5366978645324707 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.9281716346740723 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010833740234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011172294616699219 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005140304565429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1428241729736328 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007257461547851562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004830360412597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1370401382446289 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008282661437988281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009388923645019531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005908012390136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1544017791748047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008077621459960938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005674362182617188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1424551010131836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011792182922363281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.29354381561279297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7100553512573242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014119148254394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010247230529785156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00055694580078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14468622207641602 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007538795471191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005869865417480469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.388671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018138885498046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.564173698425293 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.9521408081054688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8251919746398926 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.1312270164489746 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.53016996383667 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.619093418121338 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.935083866119385 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.3596510887146 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016160011291503906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001071929931640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005793571472167969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14377212524414062 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008058547973632812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005621910095214844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13944101333618164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008726119995117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010128021240234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005850791931152344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1518087387084961 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007882118225097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005822181701660156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1495060920715332 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008993148803710938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009779930114746094 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00057220458984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14580202102661133 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008082389831542969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005941390991210938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1502552032470703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011267662048339844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.29612207412719727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6929421424865723 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008482933044433594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010027885437011719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005970001220703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15534210205078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011806488037109375 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006031990051269531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13625669479370117 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013580322265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2927212715148926 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6943831443786621 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.571485996246338 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8858733177185059 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.2807059288024902 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011811256408691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011668205261230469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006361007690429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15715312957763672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00078582763671875 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006113052368164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14507198333740234 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014023780822753906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.30347204208374023 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7158212661743164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.1717190742492676 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.4729180335998535 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.873730182647705 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.423295974731445 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.740325927734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.180764198303223 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012602806091308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014162063598632812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005908012390136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14264917373657227 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007991790771484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005979537963867188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1430668830871582 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008769035339355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010676383972167969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006089210510253906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1512908935546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008521080017089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005278587341308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1421060562133789 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008006095886230469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010199546813964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005698204040527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14583206176757812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007886886596679688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005583763122558594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14273929595947266 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008411407470703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010080337524414062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005850791931152344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1541147232055664 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008096694946289062 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005736351013183594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14080190658569336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013790130615234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.308469295501709 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7072429656982422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015301704406738281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015020370483398438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007009506225585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15931415557861328 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008587837219238281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005288124084472656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13672113418579102 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011200904846191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2866706848144531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7319951057434082 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.6372160911560059 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.9515771865844727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.3489813804626465 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009679794311523438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009140968322753906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005469322204589844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15512323379516602 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008001327514648438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005707740783691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14598798751831055 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012784004211425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2942519187927246 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7104816436767578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.235507011413574 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.542409896850586 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.950443744659424 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015382766723632812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00125885009765625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005121231079101562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1469287872314453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019807815551757812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006723403930664062 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14732885360717773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015339851379394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012912750244140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005340576171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15678691864013672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012140274047851562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006647109985351562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13220787048339844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016980171203613281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3055458068847656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.736544132232666 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017352104187011719 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011210441589355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005240440368652344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14244318008422852 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009226799011230469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005331039428710938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14264869689941406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010557174682617188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.24060630798339844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6804442405700684 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.6044211387634277 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.939375877380371 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.3592629432678223 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.46913480758667 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.771485328674316 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.167536735534668 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 19.51259994506836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 19.82601022720337 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 20.20600414276123 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017271041870117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007619857788085938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005602836608886719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18388891220092773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014820098876953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005440711975097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14013195037841797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00140380859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009350776672363281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004897117614746094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13945293426513672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010647773742675781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005707740783691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.17106103897094727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013637542724609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001071929931640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00049591064453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15901803970336914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010557174682617188 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004968643188476562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15555286407470703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012869834899902344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010323524475097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00069427490234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.17567682266235352 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014252662658691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006856918334960938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.17061901092529297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013642311096191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008287429809570312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000476837158203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13871479034423828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011010169982910156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000522613525390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15774011611938477 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014767646789550781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3166956901550293 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6993155479431152 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013861656188964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010628700256347656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000621795654296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.17289400100708008 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015749931335449219 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000560760498046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1431899070739746 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016207695007324219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2907528877258301 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7428579330444336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.6009831428527832 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.9441709518432617 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.3717799186706543 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021886825561523438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011372566223144531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005693435668945312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14467477798461914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013098716735839844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005450248718261719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1455979347229004 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011892318725585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.293947696685791 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7497649192810059 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.296994209289551 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.616483688354492 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.070724010467529 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018701553344726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010142326354980469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005679130554199219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1426401138305664 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010819435119628906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006389617919921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1485600471496582 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013532638549804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009388923645019531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005068778991699219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15869903564453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011630058288574219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005917549133300781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1697092056274414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015358924865722656 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3244481086730957 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7893800735473633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018911361694335938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010938644409179688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005550384521484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.133087158203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012102127075195312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006289482116699219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15055322647094727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015201568603515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3147602081298828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7192482948303223 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.6894540786743164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.0179948806762695 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.40509033203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.660023212432861 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.9967732429504395 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.396545886993408 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020012855529785156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011210441589355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006508827209472656 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1695256233215332 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012640953063964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005788803100585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15018606185913086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017189979553222656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010929107666015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014438629150390625 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6029162406921387 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018496513366699219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006303787231445312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1850109100341797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019297599792480469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010743141174316406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005421638488769531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14896440505981445 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012311935424804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004515647888183594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.11957740783691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009789466857910156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2547116279602051 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6623601913452148 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014123916625976562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007419586181640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004620552062988281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.11452722549438477 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011930465698242188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005440711975097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14642095565795898 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011839866638183594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3109879493713379 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6402072906494141 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.4361000061035156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8000679016113281 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.6528520584106445 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021529197692871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012726783752441406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0026988983154296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1656956672668457 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00110626220703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005517005920410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16408014297485352 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018076896667480469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.34659814834594727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7982020378112793 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.6018190383911133 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.9275670051574707 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.3656511306762695 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.219892024993896 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.529478073120117 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.991544723510742 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 33.36520004272461 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 33.66642093658447 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 34.08048677444458 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0028810501098632812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001384735107421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005097389221191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15726280212402344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014691352844238281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005593299865722656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1589679718017578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017867088317871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012350082397460938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006070137023925781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.17696285247802734 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016679763793945312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005960464477539062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1674966812133789 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002028942108154297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009942054748535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006494522094726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1654829978942871 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016260147094726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005903244018554688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16005325317382812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017781257629394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010428428649902344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005097389221191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1605062484741211 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018916130065917969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006861686706542969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.19503211975097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020589828491210938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012278556823730469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006666183471679688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16475296020507812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00127410888671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009970664978027344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.22607898712158203 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00218963623046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010437965393066406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006580352783203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.17156410217285156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020279884338378906 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00061798095703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18597984313964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018649101257324219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.33235836029052734 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.1665220260620117 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018887519836425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011086463928222656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005598068237304688 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2091059684753418 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013461112976074219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00045299530029296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13797998428344727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001316070556640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2840456962585449 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7669572830200195 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.088068962097168 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.4862866401672363 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.974453926086426 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020837783813476562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00125885009765625 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005140304565429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15535402297973633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013241767883300781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006470680236816406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16276264190673828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016579627990722656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3233480453491211 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7626957893371582 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.922847270965576 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.323439121246338 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 5.140442371368408 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002056121826171875 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011653900146484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005478858947753906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14645719528198242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012807846069335938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00049591064453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1614360809326172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001476287841796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010027885437011719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005979537963867188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18484163284301758 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0038437843322753906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006551742553710938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18326711654663086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015358924865722656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.32230281829833984 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7896699905395508 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014629364013671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008678436279296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005421638488769531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15472698211669922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017347335815429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005350112915039062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.17097139358520508 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002071857452392578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3291177749633789 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7716307640075684 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.7477941513061523 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.053518295288086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.4527907371520996 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.755111217498779 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 8.098189353942871 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 8.552235126495361 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0024781227111816406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010743141174316406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007638931274414062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18132305145263672 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012488365173339844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004963874816894531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15256023406982422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015540122985839844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000942230224609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006542205810546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14295101165771484 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013241767883300781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006756782531738281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14895009994506836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015149116516113281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010075569152832031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004220008850097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12136697769165039 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011768341064453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004830360412597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1414351463317871 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014758110046386719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2886829376220703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6508316993713379 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017218589782714844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009989738464355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006470680236816406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14416027069091797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013456344604492188 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004677772521972656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14316892623901367 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013337135314941406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.26708221435546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6741781234741211 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.4902210235595703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8330097198486328 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.2487311363220215 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018448829650878906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010862350463867188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005159378051757812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1448369026184082 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001399993896484375 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006051063537597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16013288497924805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014462471008300781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2934389114379883 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7018508911132812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.155062198638916 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.4668755531311035 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.9316020011901855 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.663640022277832 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 13.012913227081299 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 13.482614994049072 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002155780792236328 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012302398681640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005068778991699219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1469130516052246 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014200210571289062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005822181701660156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.17618799209594727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017390251159667969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001567840576171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004930496215820312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1594533920288086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011453628540039062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0003991127014160156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12719202041625977 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012102127075195312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010366439819335938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00045013427734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1373443603515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013470649719238281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007786750793457031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14468002319335938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015377998352050781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010027885437011719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006327629089355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15418386459350586 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014033317565917969 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005016326904296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14644289016723633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013780593872070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.29027891159057617 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7219200134277344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012249946594238281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011219978332519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005321502685546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1640157699584961 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012340545654296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005340576171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1600179672241211 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014719963073730469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.33702993392944336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7754549980163574 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.630025863647461 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.9273433685302734 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.322834014892578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019211769104003906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010209083557128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004482269287109375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15714216232299805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013341903686523438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005125999450683594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15595340728759766 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014438629150390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3165440559387207 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7456569671630859 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.230360984802246 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.486339569091797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.884672164916992 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019140243530273438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009617805480957031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008916854858398438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15056991577148438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018429756164550781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005898475646972656 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.4849710464477539 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00255584716796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011982917785644531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00044345855712890625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16974592208862305 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013341903686523438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004291534423828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13869810104370117 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001293182373046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.28970909118652344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6965947151184082 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016069412231445312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011548995971679688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004773139953613281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13863754272460938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014643669128417969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005860328674316406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.19362926483154297 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019707679748535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.34016895294189453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7553291320800781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.6334772109985352 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.304244041442871 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.7022452354431152 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.790197372436523 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.14028787612915 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.5714850425720215 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 21.212110996246338 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 21.60295581817627 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 22.044804096221924 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 56.295923709869385 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 56.58215284347534 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 56.961671352386475 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0024538040161132812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011801719665527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 9
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005011558532714844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13991403579711914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011801719665527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005588531494140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1719965934753418 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016126632690429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009756088256835938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005130767822265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1521000862121582 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015192031860351562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005660057067871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16810321807861328 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017762184143066406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011186599731445312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005745887756347656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16358280181884766 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013723373413085938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005831718444824219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16535711288452148 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017018318176269531 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012559890747070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008702278137207031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.17934322357177734 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016298294067382812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011448860168457031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.20883798599243164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018830299377441406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011172294616699219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005002021789550781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1225271224975586 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011410713195800781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004916191101074219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1262364387512207 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015058517456054688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011539459228515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004439353942871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1292266845703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010571479797363281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005388259887695312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13165283203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013442039489746094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008997917175292969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005102157592773438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13364696502685547 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012006759643554688 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00045299530029296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1285567283630371 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011491775512695312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.25287628173828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6271772384643555 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014657974243164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008807182312011719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000629425048828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1729578971862793 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014123916625976562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006051063537597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16624069213867188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014467239379882812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.31336259841918945 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7451310157775879 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5084896087646484 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.7933683395385742 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.1999878883361816 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016031265258789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010352134704589844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007939338684082031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18131399154663086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012559890747070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005698204040527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15376520156860352 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015282630920410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.30008602142333984 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7705779075622559 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.107448101043701 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.3737874031066895 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.728761672973633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00201416015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011429786682128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005240440368652344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1466078758239746 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011963844299316406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00063323974609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1354050636291504 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011839866638183594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010094642639160156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005903244018554688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1772909164428711 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00127410888671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005941390991210938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1423330307006836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014801025390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.27697277069091797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7098655700683594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013823509216308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010638236999511719 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005183219909667969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13573980331420898 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012307167053222656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005788803100585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16103410720825195 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013589859008789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3075728416442871 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.725398063659668 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.636751651763916 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.9315919876098633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.37166690826416 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.333314895629883 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.711398124694824 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.173976898193359 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022110939025878906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011463165283203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000774383544921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16795015335083008 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014595985412597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005316734313964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15768814086914062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014810562133789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011110305786132812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004878044128417969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1505441665649414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011219978332519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00048065185546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14616107940673828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016841888427734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008869171142578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006022453308105469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13515806198120117 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014691352844238281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008649826049804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1590127944946289 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001621246337890625 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3329439163208008 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7169618606567383 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017600059509277344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010409355163574219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005521774291992188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1469888687133789 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015201568603515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005459785461425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1706862449645996 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013980865478515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3053460121154785 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7063241004943848 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5989413261413574 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.9030218124389648 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.325989246368408 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020399093627929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010752677917480469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007410049438476562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15320110321044922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013599395751953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000797271728515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16936588287353516 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015511512756347656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2944059371948242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7188148498535156 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.1944351196289062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.5727758407592773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.9945340156555176 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.314301013946533 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.626805782318115 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.074079990386963 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019321441650390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011191368103027344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006861686706542969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16019201278686523 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012946128845214844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006880760192871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18382596969604492 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017218589782714844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010781288146972656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005459785461425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13373899459838867 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011172294616699219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004439353942871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14095401763916016 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013270378112792969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00102996826171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005702972412109375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1616201400756836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013799667358398438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006880760192871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16211462020874023 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017485618591308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00090789794921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005178451538085938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12709474563598633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011854171752929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006232261657714844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.19079160690307617 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015082359313964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.33019161224365234 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6949348449707031 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002105236053466797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010652542114257812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00063323974609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1805739402770996 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014081001281738281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006041526794433594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15306663513183594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001644134521484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3180203437805176 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7588529586791992 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.6280059814453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.9454951286315918 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.362429141998291 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020294189453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009899139404296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006003379821777344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14601707458496094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011510848999023438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005803108215332031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1651477813720703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016865730285644531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.348391056060791 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7818126678466797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.603181838989258 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.920377731323242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.293860912322998 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002433300018310547 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012450218200683594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006203651428222656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1416630744934082 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013604164123535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005822181701660156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15134000778198242 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022115707397460938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001216888427734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005617141723632812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14943265914916992 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013952255249023438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005459785461425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.4803352355957031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0024518966674804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6357479095458984 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.077688217163086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016388893127441406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011963844299316406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006937980651855469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15288686752319336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012125968933105469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004830360412597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16124391555786133 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015459060668945312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2940497398376465 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7587733268737793 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.980578899383545 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.364750862121582 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.757718086242676 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.248446941375732 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.577197074890137 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 8.013957023620605 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 20.24707794189453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 20.598175048828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 21.012067317962646 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0025653839111328125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010018348693847656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006399154663085938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12688159942626953 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017576217651367188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005369186401367188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1494159698486328 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020356178283691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010170936584472656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004782676696777344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1579608917236328 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0025811195373535156 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000881195068359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.24002885818481445 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021834373474121094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012946128845214844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00063323974609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1234273910522461 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014491081237792969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005388259887695312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14327001571655273 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014848709106445312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010151863098144531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005049705505371094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12688016891479492 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014100074768066406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006318092346191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.17326593399047852 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016398429870605469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009531974792480469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00048828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.11839914321899414 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010862350463867188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000518798828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13735103607177734 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001407623291015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2993888854980469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6510448455810547 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015931129455566406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009627342224121094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005059242248535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13545513153076172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012769699096679688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004572868347167969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14647293090820312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015377998352050781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2667570114135742 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6507668495178223 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.449516773223877 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8124041557312012 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.1976261138916016 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018320083618164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011429786682128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005459785461425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15180301666259766 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012927055358886719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00047016143798828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13680601119995117 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012278556823730469 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.27126312255859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6820402145385742 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.043363094329834 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.328616142272949 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.7232298851013184 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021910667419433594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008692741394042969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000682830810546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2696981430053711 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00145721435546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004658699035644531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14561843872070312 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017452239990234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012650489807128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005240440368652344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14048194885253906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010709762573242188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004000663757324219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1400432586669922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012359619140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.260958194732666 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6494579315185547 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014252662658691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008401870727539062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004286766052246094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1664738655090332 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012907981872558594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005407333374023438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13875675201416016 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012927055358886719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2577681541442871 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6529741287231445 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.4628667831420898 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.766836166381836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.280092716217041 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.142566204071045 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.590107440948486 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 8.230373859405518 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0025091171264648438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013933181762695312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019731521606445312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1508798599243164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013251304626464844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00047588348388671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14301681518554688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013942718505859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011148452758789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006480216979980469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15373516082763672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015521049499511719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0003399848937988281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14392900466918945 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001605987548828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008606910705566406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00042629241943359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13577938079833984 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012869834899902344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006513595581054688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16047000885009766 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015282630920410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.30282020568847656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6922988891601562 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014348030090332031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000850677490234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000492095947265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13105487823486328 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010318756103515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004820823669433594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16464567184448242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015759468078613281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.34658193588256836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7228708267211914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5571932792663574 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8746190071105957 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.2834229469299316 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015873908996582031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009360313415527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005779266357421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1366257667541504 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013141632080078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006327629089355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15964603424072266 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.012003898620605469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3346590995788574 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7327051162719727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.151021957397461 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.4657421112060547 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.897280693054199 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.29298210144043 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.71522045135498 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 13.125994205474854 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 34.53515386581421 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 34.882030963897705 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 35.279937744140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 92.42024803161621 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 34
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 9
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 92.70668125152588 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 34
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 93.1037049293518 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 34
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0024809837341308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010118484497070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005059242248535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1597437858581543 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011119842529296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005712509155273438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14412498474121094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015912055969238281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000774383544921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004630088806152344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1283888816833496 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010051727294921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005369186401367188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16468524932861328 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016608238220214844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011219978332519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004820823669433594 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1313338279724121 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011477470397949219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007090568542480469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14889812469482422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015382766723632812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009226799011230469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004181861877441406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1452198028564453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010995864868164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004448890686035156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12937116622924805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012001991271972656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009031295776367188 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005469322204589844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14388704299926758 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009961128234863281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005178451538085938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15695428848266602 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013260841369628906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008378028869628906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004429817199707031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1512441635131836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011429786682128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005841255187988281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1535181999206543 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015349388122558594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009350776672363281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00045299530029296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.11325788497924805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011057853698730469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000598907470703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15342187881469727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013723373413085938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011029243469238281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005660057067871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15295076370239258 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012960433959960938 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005898475646972656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15440702438354492 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00128936767578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.27260541915893555 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7142558097839355 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013866424560546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011539459228515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005331039428710938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14088010787963867 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016241073608398438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004429817199707031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1394801139831543 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015320777893066406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.27034997940063477 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7176122665405273 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.56211519241333 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8636980056762695 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.2409610748291016 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020799636840820312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010318756103515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004038810729980469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12364482879638672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013103485107421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004382133483886719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12629985809326172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013060569763183594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.26201772689819336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6666598320007324 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.0650339126586914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.3623228073120117 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.74910306930542 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019412040710449219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009942054748535156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00036716461181640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1146397590637207 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012722015380859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004429817199707031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.5050549507141113 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0025310516357421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011739730834960938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004839897155761719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16359281539916992 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011630058288574219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005440711975097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15196990966796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017232894897460938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2946939468383789 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7028298377990723 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00150299072265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008482933044433594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00048732757568359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13950824737548828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009999275207519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004420280456542969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12646484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014452934265136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.27130603790283203 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.699254035949707 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5764989852905273 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.274564743041992 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.6030659675598145 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.532945156097412 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.848644733428955 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.228507041931152 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0024404525756835938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009517669677734375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005769729614257812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1450209617614746 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001068115234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00040531158447265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14157581329345703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010929107666015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009951591491699219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005087852478027344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14388418197631836 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012097358703613281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00055694580078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1695709228515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011973381042480469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010600090026855469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004100799560546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12752485275268555 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012421607971191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005931854248046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1375889778137207 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017681121826171875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.30341482162475586 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7208786010742188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014338493347167969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009212493896484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00045871734619140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.11425161361694336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010409355163574219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004429817199707031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15516185760498047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011677742004394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3290901184082031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6634140014648438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.536858081817627 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.873176097869873 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.252305030822754 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018887519836425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010781288146972656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004620552062988281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1343698501586914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013589859008789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006647109985351562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1451888084411621 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00164031982421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.30263710021972656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7101383209228516 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.0939722061157227 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.4048523902893066 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.809786319732666 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.180346012115479 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.473578929901123 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.88222360610962 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002056598663330078 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011768341064453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007219314575195312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13353729248046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011777877807617188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004940032958984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15606069564819336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014848709106445312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009179115295410156 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004978179931640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13355588912963867 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00121307373046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004372596740722656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13022232055664062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013799667358398438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010571479797363281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005521774291992188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.18397092819213867 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013451576232910156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005941390991210938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14203596115112305 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017218589782714844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009999275207519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0003743171691894531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.11805009841918945 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012359619140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004730224609375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15937185287475586 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001300811767578125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.289186954498291 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6410312652587891 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015320777893066406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010619163513183594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00041294097900390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13945484161376953 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009989738464355469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0003638267517089844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12335014343261719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011301040649414062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2524137496948242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6578617095947266 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.450648307800293 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.727034091949463 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.1666417121887207 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020971298217773438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011181831359863281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004096031188964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1308579444885254 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010318756103515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004639625549316406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12709617614746094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012898445129394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.24361515045166016 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6606011390686035 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.0215020179748535 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.2984557151794434 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.694131851196289 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020170211791992188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011172294616699219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005459785461425781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1284341812133789 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011072158813476562 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00043201446533203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1252150535583496 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012598037719726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009088516235351562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004978179931640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13251686096191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012111663818359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004329681396484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1425614356994629 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018262863159179688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3127121925354004 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7072200775146484 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015716552734375 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009846687316894531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004119873046875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12607383728027344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011286735534667969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005431175231933594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1445140838623047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013108253479003906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2928586006164551 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6803450584411621 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5476179122924805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8237290382385254 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.186647891998291 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.086236953735352 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.400341033935547 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.797937870025635 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 18.832437992095947 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 19.15104103088379 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 19.565893173217773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0021429061889648438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010790824890136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 7
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004787445068359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13272809982299805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012159347534179688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005698204040527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14217090606689453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014319419860839844 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011620521545410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005908012390136719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.158843994140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012178421020507812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005497932434082031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16100072860717773 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012412071228027344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010819435119628906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006208419799804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16225624084472656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012478828430175781 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006489753723144531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16048288345336914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014028549194335938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009608268737792969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005259513854980469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16143083572387695 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012822151184082031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00048160552978515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14229822158813477 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013833045959472656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008697509765625 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004782676696777344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1353158950805664 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008993148803710938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0003829002380371094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12949323654174805 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011811256408691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2941899299621582 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6395268440246582 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009350776672363281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00090789794921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00039577484130859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13139104843139648 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000946044921875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00047206878662109375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13074874877929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00104522705078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.26331281661987305 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6577157974243164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.4560351371765137 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.7561330795288086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.2071027755737305 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011792182922363281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00104522705078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004296302795410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14604902267456055 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008492469787597656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004420280456542969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12661123275756836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012631416320800781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2584848403930664 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6395840644836426 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.005537986755371 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.3269309997558594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.7922630310058594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0023040771484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011191368103027344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005049705505371094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15764188766479492 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013823509216308594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00047016143798828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14204740524291992 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00115203857421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008449554443359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0003771781921386719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.11670112609863281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011396408081054688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005440711975097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15399885177612305 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014820098876953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2816758155822754 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6231632232666016 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018568038940429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008978843688964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005130767822265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1513538360595703 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011167526245117188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00222015380859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7226357460021973 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00279998779296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.8818149566650391 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.2687420845031738 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.056318759918213 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.368192672729492 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.76906681060791 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.703982830047607 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.056327819824219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.482314109802246 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002235889434814453 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015535354614257812 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000682830810546875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15170621871948242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011096000671386719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005788803100585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12948989868164062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013799667358398438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010046958923339844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014667510986328125 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.5145082473754883 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001964092254638672 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004673004150390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1224832534790039 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014567375183105469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011119842529296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00047397613525390625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1404266357421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011568069458007812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005559921264648438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13882970809936523 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014858245849609375 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.27487802505493164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7840104103088379 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020470619201660156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011591911315917969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00061798095703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15843629837036133 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011701583862304688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00061798095703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16608715057373047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015172958374023438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3547782897949219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7741241455078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.7048239707946777 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.9890022277832031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.758577823638916 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002392292022705078 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00092315673828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004429817199707031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.11678075790405273 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008587837219238281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005350112915039062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16915607452392578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022878646850585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3554954528808594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6956324577331543 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.5885000228881836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.864316940307617 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.665122032165527 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.342613220214844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.626536846160889 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 13.076340198516846 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 32.785587787628174 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 7
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 33.10923194885254 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 33.45688581466675 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 13
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0029730796813964844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010981559753417969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013060569763183594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14081239700317383 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0017819404602050781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0003876686096191406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16716909408569336 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0022487640380859375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010538101196289062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005660057067871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1661539077758789 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012650489807128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004229545593261719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1302628517150879 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012350082397460938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008220672607421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004138946533203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12705373764038086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010929107666015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00040912628173828125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14795303344726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012969970703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012998580932617188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00049591064453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14404630661010742 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012369155883789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006322860717773438 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.23291397094726562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0032868385314941406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013899803161621094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005960464477539062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2006673812866211 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019989013671875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00042438507080078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1436290740966797 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.002258777618408203 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001071929931640625 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004496574401855469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16468334197998047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0024061203002929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00066375732421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.20357990264892578 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018877983093261719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.3594779968261719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.812528133392334 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0019097328186035156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001094818115234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005612373352050781 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15154314041137695 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016388893127441406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004630088806152344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1381549835205078 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013647079467773438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2696409225463867 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6667337417602539 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.6476340293884277 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.9298038482666016 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.4593491554260254 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014538764953613281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00101470947265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005106925964355469 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14820480346679688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011148452758789062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005898475646972656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1362133026123047 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012760162353515625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2668337821960449 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6755752563476562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.286008834838867 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.729428291320801 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 4.124452114105225 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013079643249511719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009870529174804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006351470947265625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13318300247192383 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013666152954101562 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005679130554199219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13773727416992188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.006686687469482422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011930465698242188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007090568542480469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1570286750793457 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016846656799316406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006546974182128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16198492050170898 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018978118896484375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.292417049407959 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.749575138092041 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0018758773803710938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012068748474121094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004973411560058594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14243412017822266 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012478828430175781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0004839897155761719 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14292287826538086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0020399093627929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.31038618087768555 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.752227783203125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.7144451141357422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.0452070236206055 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.4411520957946777 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.73626708984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.053107261657715 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.422426223754883 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0032181739807128906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012907981872558594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005488395690917969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.194580078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0016393661499023438 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005249977111816406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14610004425048828 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014772415161132812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008678436279296875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006809234619140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.12619400024414062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013833045959472656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005612373352050781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.17694997787475586 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013132095336914062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009503364562988281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006251335144042969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14691400527954102 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007510185241699219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005660057067871094 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13560056686401367 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001194000244140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.27190303802490234 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.7046847343444824 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010190010070800781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008392333984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005440711975097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14255905151367188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007958412170410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007243156433105469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13777780532836914 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012259483337402344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.28290319442749023 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6689310073852539 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.5286850929260254 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8678550720214844 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.2335257530212402 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000881195068359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008969306945800781 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000537872314453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1448678970336914 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007753372192382812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005559921264648438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15548133850097656 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012989044189453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2947072982788086 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6747050285339355 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.06850004196167 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.3723340034484863 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.842319965362549 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.444533824920654 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 5
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 11.723029136657715 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 12.134719371795654 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 5
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011363029479980469 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010676383972167969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 6
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005240440368652344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13893938064575195 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007619857788085938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005788803100585938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13206815719604492 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001125335693359375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009660720825195312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005970001220703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1314091682434082 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006990432739257812 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005440711975097656 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1395716667175293 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007691383361816406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009694099426269531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005779266357421875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1405200958251953 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007658004760742188 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005240440368652344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13083219528198242 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007677078247070312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00089263916015625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006003379821777344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13904094696044922 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.000827789306640625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005402565002441406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15201807022094727 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0012898445129394531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.29286623001098633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6642804145812988 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010528564453125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007929801940917969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.00060272216796875 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1408061981201172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007052421569824219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005197525024414062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1335129737854004 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015149116516113281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.28129100799560547 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6621842384338379 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.4871492385864258 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.7741522789001465 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.1456308364868164 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010128021240234375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009160041809082031 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005850791931152344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13969802856445312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007429122924804688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005559921264648438 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.1333770751953125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0011591911315917969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.27826786041259766 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6687579154968262 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.9770469665527344 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 3
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.270956039428711 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 3.637881278991699 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0010309219360351562 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0015764236450195312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 4
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005984306335449219 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16396474838256836 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0008683204650878906 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006809234619140625 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.16869878768920898 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": false
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.001277923583984375 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007777214050292969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 1
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005712509155273438 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 1
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.13817501068115234 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0007519721984863281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005960464477539062 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14407777786254883 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013117790222167969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 1
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2858600616455078 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 1
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.653594970703125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fib"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0013661384582519531 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0009369850158691406 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006251335144042969 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "-",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.15089702606201172 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0006971359252929688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 2
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005860328674316406 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 2
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "<",
  "right": {
    "type": "Number",
    "value": 2
  },
  "left": {
    "type": "VariableName",
    "value": "n"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.14107179641723633 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "boolean",
  "ret": true
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "n"
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0014061927795410156 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 0
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2819790840148926 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.6900310516357422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 0
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.4949889183044434 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 2
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 1.8178339004516602 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 2.504328727722168 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 1
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.295910358428955 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 4
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 6.5973219871521 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 7.002502918243408 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 3
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 19.291511058807373 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 6
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 19.65091896057129 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 20.05539894104004 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 8
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 53.68183994293213 ms. +1ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 8
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 53.974143981933594 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Binary",
      "operator": "-",
      "right": {
        "type": "Number",
        "value": 2
      },
      "left": {
        "type": "VariableName",
        "value": "n"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 54.3776478767395 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 21
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Binary",
  "operator": "+",
  "right": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 2
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  },
  "left": {
    "args": [
      {
        "type": "Binary",
        "operator": "-",
        "right": {
          "type": "Number",
          "value": 1
        },
        "left": {
          "type": "VariableName",
          "value": "n"
        }
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fib"
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 147.6522159576416 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "If",
  "condition": {
    "type": "Binary",
    "operator": "<",
    "right": {
      "type": "Number",
      "value": 2
    },
    "left": {
      "type": "VariableName",
      "value": "n"
    }
  },
  "then": {
    "type": "VariableName",
    "value": "n"
  },
  "else": {
    "type": "Binary",
    "operator": "+",
    "right": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 2
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    "left": {
      "args": [
        {
          "type": "Binary",
          "operator": "-",
          "right": {
            "type": "Number",
            "value": 1
          },
          "left": {
            "type": "VariableName",
            "value": "n"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "fib"
      }
    }
  }
}, environment: Enviroment = {
  "variables": {
    "n": 10
  },
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 147.93680095672607 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Number",
      "value": 10
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fib"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 148.22138929367065 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
Function "fib(10)" took: 148.32534408569336 ms.
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Lambda",
      "variables": [],
      "body": {
        "args": [
          {
            "type": "Number",
            "value": 10
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fib"
        }
      }
    },
    {
      "type": "String",
      "value": "fib(10)"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "time"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 148.63369798660278 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
55
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "Lambda",
          "variables": [],
          "body": {
            "args": [
              {
                "type": "Number",
                "value": 10
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "fib"
            }
          }
        },
        {
          "type": "String",
          "value": "fib(10)"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "time"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 148.83403396606445 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.005484104156494141 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "time"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0026569366455078125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Lambda",
  "variables": [],
  "body": {
    "args": [
      {
        "type": "Number",
        "value": 10
      }
    ],
    "type": "FunctionCall",
    "fn": {
      "type": "VariableName",
      "value": "fibJS"
    }
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.007524013519287109 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "fibJS(10)"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0007061958312988281 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "fibJS(10)"
}.
 +1ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "fibJS"
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.008944988250732422 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Number",
  "value": 10
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.0005998611450195312 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 10
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Number",
      "value": 10
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "fibJS"
  }
}, environment: Enviroment = {
  "variables": {},
  "parent": {
    "variables": {},
    "name": "global"
  },
  "name": "anonymous lambda"
})." took: 0.2431197166442871 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
Function "fibJS(10)" took: 0.36791086196899414 ms.
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "Lambda",
      "variables": [],
      "body": {
        "args": [
          {
            "type": "Number",
            "value": 10
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "fibJS"
        }
      }
    },
    {
      "type": "String",
      "value": "fibJS(10)"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "time"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.6404352188110352 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "number",
  "ret": 55
}.
 +0ms
55
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "args": [
        {
          "type": "Lambda",
          "variables": [],
          "body": {
            "args": [
              {
                "type": "Number",
                "value": 10
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "fibJS"
            }
          }
        },
        {
          "type": "String",
          "value": "fibJS(10)"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "time"
      }
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.8817901611328125 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "VariableName",
  "value": "log"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0039052963256835938 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "function"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "String",
  "value": "---------"
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.0006361007690429688 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "string",
  "ret": "---------"
}.
 +0ms
---------
lambda:debug Function "
evaluate(expression: AST = {
  "args": [
    {
      "type": "String",
      "value": "---------"
    }
  ],
  "type": "FunctionCall",
  "fn": {
    "type": "VariableName",
    "value": "log"
  }
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 0.19735383987426758 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +0ms
lambda:debug Function "
evaluate(expression: AST = {
  "type": "Program",
  "program": [
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "head"
          },
          {
            "type": "VariableName",
            "value": "tail"
          }
        ],
        "body": {
          "type": "Lambda",
          "variables": [
            {
              "type": "VariableName",
              "value": "a"
            },
            {
              "type": "VariableName",
              "value": "i"
            },
            {
              "type": "VariableName",
              "value": "replacement"
            }
          ],
          "body": {
            "type": "If",
            "condition": {
              "type": "Binary",
              "operator": "==",
              "right": {
                "type": "String",
                "value": "get"
              },
              "left": {
                "type": "VariableName",
                "value": "a"
              }
            },
            "then": {
              "type": "If",
              "condition": {
                "type": "Binary",
                "operator": "==",
                "right": {
                  "type": "Number",
                  "value": 0
                },
                "left": {
                  "type": "VariableName",
                  "value": "i"
                }
              },
              "then": {
                "type": "VariableName",
                "value": "head"
              },
              "else": {
                "type": "VariableName",
                "value": "tail"
              }
            },
            "else": {
              "type": "If",
              "condition": {
                "type": "Binary",
                "operator": "==",
                "right": {
                  "type": "Number",
                  "value": 0
                },
                "left": {
                  "type": "VariableName",
                  "value": "i"
                }
              },
              "then": {
                "type": "Assign",
                "operator": "=",
                "right": {
                  "type": "VariableName",
                  "value": "replacement"
                },
                "left": {
                  "type": "VariableName",
                  "value": "head"
                }
              },
              "else": {
                "type": "Assign",
                "operator": "=",
                "right": {
                  "type": "VariableName",
                  "value": "replacement"
                },
                "left": {
                  "type": "VariableName",
                  "value": "tail"
                }
              }
            }
          }
        }
      },
      "left": {
        "type": "VariableName",
        "value": "cons"
      }
    },
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "cell"
          }
        ],
        "body": {
          "args": [
            {
              "type": "String",
              "value": "get"
            },
            {
              "type": "Number",
              "value": 0
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cell"
          }
        }
      },
      "left": {
        "type": "VariableName",
        "value": "car"
      }
    },
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "cell"
          }
        ],
        "body": {
          "args": [
            {
              "type": "String",
              "value": "get"
            },
            {
              "type": "Number",
              "value": 1
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cell"
          }
        }
      },
      "left": {
        "type": "VariableName",
        "value": "cdr"
      }
    },
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "cell"
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "body": {
          "args": [
            {
              "type": "String",
              "value": "set"
            },
            {
              "type": "Number",
              "value": 0
            },
            {
              "type": "VariableName",
              "value": "val"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cell"
          }
        }
      },
      "left": {
        "type": "VariableName",
        "value": "set-car"
      }
    },
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "cell"
          },
          {
            "type": "VariableName",
            "value": "val"
          }
        ],
        "body": {
          "args": [
            {
              "type": "String",
              "value": "set"
            },
            {
              "type": "Number",
              "value": 1
            },
            {
              "type": "VariableName",
              "value": "val"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cell"
          }
        }
      },
      "left": {
        "type": "VariableName",
        "value": "set-cdr"
      }
    },
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "args": [
          {
            "type": "Number",
            "value": 0
          },
          {
            "type": "Number",
            "value": 0
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cons"
        }
      },
      "left": {
        "type": "VariableName",
        "value": "null"
      }
    },
    {
      "args": [
        {
          "type": "VariableName",
          "value": "null"
        },
        {
          "type": "VariableName",
          "value": "null"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "set-car"
      }
    },
    {
      "args": [
        {
          "type": "VariableName",
          "value": "null"
        },
        {
          "type": "VariableName",
          "value": "null"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "set-cdr"
      }
    },
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "list"
          },
          {
            "type": "VariableName",
            "value": "fn"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "!=",
            "right": {
              "type": "VariableName",
              "value": "null"
            },
            "left": {
              "type": "VariableName",
              "value": "list"
            }
          },
          "then": {
            "type": "Program",
            "program": [
              {
                "args": [
                  {
                    "args": [
                      {
                        "type": "VariableName",
                        "value": "list"
                      }
                    ],
                    "type": "FunctionCall",
                    "fn": {
                      "type": "VariableName",
                      "value": "car"
                    }
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "fn"
                }
              },
              {
                "args": [
                  {
                    "args": [
                      {
                        "type": "VariableName",
                        "value": "list"
                      }
                    ],
                    "type": "FunctionCall",
                    "fn": {
                      "type": "VariableName",
                      "value": "cdr"
                    }
                  },
                  {
                    "type": "VariableName",
                    "value": "fn"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "for-each"
                }
              }
            ]
          }
        }
      },
      "left": {
        "type": "VariableName",
        "value": "for-each"
      }
    },
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "a"
          },
          {
            "type": "VariableName",
            "value": "b"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "<=",
            "right": {
              "type": "VariableName",
              "value": "b"
            },
            "left": {
              "type": "VariableName",
              "value": "a"
            }
          },
          "then": {
            "args": [
              {
                "type": "VariableName",
                "value": "a"
              },
              {
                "args": [
                  {
                    "type": "Binary",
                    "operator": "+",
                    "right": {
                      "type": "Number",
                      "value": 1
                    },
                    "left": {
                      "type": "VariableName",
                      "value": "a"
                    }
                  },
                  {
                    "type": "VariableName",
                    "value": "b"
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "range"
                }
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cons"
            }
          },
          "else": {
            "type": "VariableName",
            "value": "null"
          }
        }
      },
      "left": {
        "type": "VariableName",
        "value": "range"
      }
    },
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "args": [
          {
            "type": "Number",
            "value": 10
          },
          {
            "type": "Number",
            "value": 20
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cons"
        }
      },
      "left": {
        "type": "VariableName",
        "value": "x"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "x"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "x"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    },
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "args": [
              {
                "type": "Number",
                "value": 2
              },
              {
                "args": [
                  {
                    "type": "Number",
                    "value": 3
                  },
                  {
                    "args": [
                      {
                        "type": "Number",
                        "value": 4
                      },
                      {
                        "args": [
                          {
                            "type": "Number",
                            "value": 5
                          },
                          {
                            "type": "VariableName",
                            "value": "null"
                          }
                        ],
                        "type": "FunctionCall",
                        "fn": {
                          "type": "VariableName",
                          "value": "cons"
                        }
                      }
                    ],
                    "type": "FunctionCall",
                    "fn": {
                      "type": "VariableName",
                      "value": "cons"
                    }
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "cons"
                }
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "cons"
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cons"
        }
      },
      "left": {
        "type": "VariableName",
        "value": "x"
      }
    },
    {
      "args": [
        {
          "type": "VariableName",
          "value": "x"
        },
        {
          "type": "VariableName",
          "value": "log"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "Number",
              "value": 1
            },
            {
              "type": "Number",
              "value": 8
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "range"
          }
        },
        {
          "type": "Lambda",
          "variables": [
            {
              "type": "VariableName",
              "value": "x"
            }
          ],
          "body": {
            "args": [
              {
                "type": "Binary",
                "operator": "*",
                "right": {
                  "type": "VariableName",
                  "value": "x"
                },
                "left": {
                  "type": "VariableName",
                  "value": "x"
                }
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "log"
            }
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "for-each"
      }
    },
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "args": [
          {
            "type": "Number",
            "value": 1
          },
          {
            "type": "Number",
            "value": 2
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "cons"
        }
      },
      "left": {
        "type": "VariableName",
        "value": "x"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "x"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "x"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    },
    {
      "args": [
        {
          "type": "VariableName",
          "value": "x"
        },
        {
          "type": "Number",
          "value": 10
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "set-car"
      }
    },
    {
      "args": [
        {
          "type": "VariableName",
          "value": "x"
        },
        {
          "type": "Number",
          "value": 20
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "set-cdr"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "x"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "car"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "VariableName",
              "value": "x"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "cdr"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    },
    {
      "args": [
        {
          "type": "FunctionCall",
          "fn": {
            "type": "Lambda",
            "functionName": "loop",
            "variables": [
              {
                "value": "n"
              }
            ],
            "body": {
              "type": "If",
              "condition": {
                "type": "Binary",
                "operator": ">",
                "right": {
                  "type": "Number",
                  "value": 0
                },
                "left": {
                  "type": "VariableName",
                  "value": "n"
                }
              },
              "then": {
                "type": "Binary",
                "operator": "+",
                "right": {
                  "args": [
                    {
                      "type": "Binary",
                      "operator": "-",
                      "right": {
                        "type": "Number",
                        "value": 1
                      },
                      "left": {
                        "type": "VariableName",
                        "value": "n"
                      }
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "loop"
                  }
                },
                "left": {
                  "type": "VariableName",
                  "value": "n"
                }
              },
              "else": {
                "type": "Number",
                "value": 0
              }
            }
          },
          "args": [
            {
              "type": "Number",
              "value": 100
            }
          ]
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    },
    {
      "type": "Let",
      "variables": [
        {
          "type": "VariableDefinition",
          "name": "x",
          "definition": {
            "type": "Number",
            "value": 2
          }
        },
        {
          "type": "VariableDefinition",
          "name": "y",
          "definition": {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "Number",
              "value": 1
            },
            "left": {
              "type": "VariableName",
              "value": "x"
            }
          }
        },
        {
          "type": "VariableDefinition",
          "name": "z",
          "definition": {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "VariableName",
              "value": "y"
            },
            "left": {
              "type": "VariableName",
              "value": "x"
            }
          }
        }
      ],
      "body": {
        "args": [
          {
            "type": "Binary",
            "operator": "+",
            "right": {
              "type": "VariableName",
              "value": "z"
            },
            "left": {
              "type": "Binary",
              "operator": "+",
              "right": {
                "type": "VariableName",
                "value": "y"
              },
              "left": {
                "type": "VariableName",
                "value": "x"
              }
            }
          }
        ],
        "type": "FunctionCall",
        "fn": {
          "type": "VariableName",
          "value": "log"
        }
      }
    },
    {
      "type": "Let",
      "variables": [
        {
          "type": "VariableDefinition",
          "name": "x",
          "definition": {
            "type": "Number",
            "value": 10
          }
        }
      ],
      "body": {
        "type": "Program",
        "program": [
          {
            "type": "Let",
            "variables": [
              {
                "type": "VariableDefinition",
                "name": "x",
                "definition": {
                  "type": "Binary",
                  "operator": "*",
                  "right": {
                    "type": "Number",
                    "value": 2
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "x"
                  }
                }
              },
              {
                "type": "VariableDefinition",
                "name": "y",
                "definition": {
                  "type": "Binary",
                  "operator": "*",
                  "right": {
                    "type": "VariableName",
                    "value": "x"
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "x"
                  }
                }
              }
            ],
            "body": {
              "type": "Program",
              "program": [
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "x"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "log"
                  }
                },
                {
                  "args": [
                    {
                      "type": "VariableName",
                      "value": "y"
                    }
                  ],
                  "type": "FunctionCall",
                  "fn": {
                    "type": "VariableName",
                    "value": "log"
                  }
                }
              ]
            }
          },
          {
            "args": [
              {
                "type": "VariableName",
                "value": "x"
              }
            ],
            "type": "FunctionCall",
            "fn": {
              "type": "VariableName",
              "value": "log"
            }
          }
        ]
      }
    },
    {
      "type": "Assign",
      "operator": "=",
      "right": {
        "type": "Lambda",
        "variables": [
          {
            "type": "VariableName",
            "value": "n"
          }
        ],
        "body": {
          "type": "If",
          "condition": {
            "type": "Binary",
            "operator": "<",
            "right": {
              "type": "Number",
              "value": 2
            },
            "left": {
              "type": "VariableName",
              "value": "n"
            }
          },
          "then": {
            "type": "VariableName",
            "value": "n"
          },
          "else": {
            "type": "Binary",
            "operator": "+",
            "right": {
              "args": [
                {
                  "type": "Binary",
                  "operator": "-",
                  "right": {
                    "type": "Number",
                    "value": 2
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "n"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fib"
              }
            },
            "left": {
              "args": [
                {
                  "type": "Binary",
                  "operator": "-",
                  "right": {
                    "type": "Number",
                    "value": 1
                  },
                  "left": {
                    "type": "VariableName",
                    "value": "n"
                  }
                }
              ],
              "type": "FunctionCall",
              "fn": {
                "type": "VariableName",
                "value": "fib"
              }
            }
          }
        }
      },
      "left": {
        "type": "VariableName",
        "value": "fib"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "Lambda",
              "variables": [],
              "body": {
                "args": [
                  {
                    "type": "Number",
                    "value": 10
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "fib"
                }
              }
            },
            {
              "type": "String",
              "value": "fib(10)"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "time"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    },
    {
      "args": [
        {
          "args": [
            {
              "type": "Lambda",
              "variables": [],
              "body": {
                "args": [
                  {
                    "type": "Number",
                    "value": 10
                  }
                ],
                "type": "FunctionCall",
                "fn": {
                  "type": "VariableName",
                  "value": "fibJS"
                }
              }
            },
            {
              "type": "String",
              "value": "fibJS(10)"
            }
          ],
          "type": "FunctionCall",
          "fn": {
            "type": "VariableName",
            "value": "time"
          }
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    },
    {
      "args": [
        {
          "type": "String",
          "value": "---------"
        }
      ],
      "type": "FunctionCall",
      "fn": {
        "type": "VariableName",
        "value": "log"
      }
    }
  ]
}, environment: Enviroment = {
  "variables": {},
  "name": "global"
})." took: 371.8406901359558 ms. +0ms
lambda:debug 
"evaluate()" result is: {
  "typeof": "undefined"
}.
 +1ms
lambda:debug Function "evaluate code" took: 372.5645909309387 ms. +0ms
